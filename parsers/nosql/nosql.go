// Code generated by pigeon; DO NOT EDIT.

package nosql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/pikami/cosmium/parsers"
)

func makeSelectStmt(
	columns, fromClause, joinItems,
	whereClause interface{}, distinctClause interface{},
	count interface{}, groupByClause interface{}, orderList interface{},
	offsetClause interface{},
) (parsers.SelectStmt, error) {
	selectStmt := parsers.SelectStmt{
		SelectItems: columns.([]parsers.SelectItem),
	}

	if fromTable, ok := fromClause.(parsers.Table); ok {
		selectStmt.Table = fromTable
	}

	if joinItemsArray, ok := joinItems.([]interface{}); ok && len(joinItemsArray) > 0 {
		selectStmt.JoinItems = make([]parsers.JoinItem, len(joinItemsArray))
		for i, joinItem := range joinItemsArray {
			selectStmt.JoinItems[i] = joinItem.(parsers.JoinItem)
		}
	}

	switch v := whereClause.(type) {
	case parsers.ComparisonExpression, parsers.LogicalExpression, parsers.Constant, parsers.SelectItem:
		selectStmt.Filters = v
	}

	if distinctClause != nil {
		selectStmt.Distinct = true
	}

	if n, ok := count.(int); ok {
		selectStmt.Count = n
	}

	if offsetArr, ok := offsetClause.([]interface{}); ok && len(offsetArr) == 2 {
		if n, ok := offsetArr[0].(int); ok {
			selectStmt.Offset = n
		}

		if n, ok := offsetArr[1].(int); ok {
			selectStmt.Count = n
		}
	}

	if orderExpressions, ok := orderList.([]parsers.OrderExpression); ok {
		selectStmt.OrderExpressions = orderExpressions
	}

	if groupByClause != nil {
		selectStmt.GroupBy = groupByClause.([]parsers.SelectItem)
	}

	return selectStmt, nil
}

func makeJoin(table interface{}, column interface{}) (parsers.JoinItem, error) {
	joinItem := parsers.JoinItem{}

	if selectItem, isSelectItem := column.(parsers.SelectItem); isSelectItem {
		joinItem.SelectItem = selectItem
		joinItem.Table.Value = selectItem.Alias
	}

	if tableTyped, isTable := table.(parsers.Table); isTable {
		joinItem.Table = tableTyped
	}

	return joinItem, nil
}

func makeSelectItem(name interface{}, path interface{}, selectItemType parsers.SelectItemType) (parsers.SelectItem, error) {
	ps := path.([]interface{})

	paths := make([]string, 1)
	paths[0] = name.(string)
	for _, p := range ps {
		paths = append(paths, p.(string))
	}

	return parsers.SelectItem{Path: paths, Type: selectItemType}, nil
}

func makeColumnList(column interface{}, other_columns interface{}) ([]parsers.SelectItem, error) {
	collsAsArray := other_columns.([]interface{})
	columnList := make([]parsers.SelectItem, len(collsAsArray)+1)
	columnList[0] = column.(parsers.SelectItem)

	for i, v := range collsAsArray {
		if col, ok := v.(parsers.SelectItem); ok {
			columnList[i+1] = col
		}
	}

	return columnList, nil
}

func makeSelectArray(columns interface{}) (parsers.SelectItem, error) {
	return parsers.SelectItem{
		SelectItems: columns.([]parsers.SelectItem),
		Type:        parsers.SelectItemTypeArray,
	}, nil
}

func makeSelectObject(field interface{}, other_fields interface{}) (parsers.SelectItem, error) {
	fieldsAsArray := other_fields.([]interface{})
	fieldsList := make([]parsers.SelectItem, len(fieldsAsArray)+1)
	fieldsList[0] = field.(parsers.SelectItem)

	for i, v := range fieldsAsArray {
		if col, ok := v.(parsers.SelectItem); ok {
			fieldsList[i+1] = col
		}
	}

	return parsers.SelectItem{
		SelectItems: fieldsList,
		Type:        parsers.SelectItemTypeObject,
	}, nil
}

func makeOrderByClause(ex1 interface{}, others interface{}) ([]parsers.OrderExpression, error) {
	othersArray := others.([]interface{})
	orderList := make([]parsers.OrderExpression, len(othersArray)+1)
	orderList[0] = ex1.(parsers.OrderExpression)

	for i, v := range othersArray {
		if col, ok := v.(parsers.OrderExpression); ok {
			orderList[i+1] = col
		}
	}

	return orderList, nil
}

func makeOrderExpression(field interface{}, order interface{}) (parsers.OrderExpression, error) {
	value := parsers.OrderExpression{
		SelectItem: field.(parsers.SelectItem),
		Direction:  parsers.OrderDirectionAsc,
	}

	if orderValue, ok := order.(parsers.OrderDirection); ok {
		value.Direction = orderValue
	}

	return value, nil
}

func createFunctionCall(functionType parsers.FunctionCallType, arguments []interface{}) (parsers.FunctionCall, error) {
	return parsers.FunctionCall{Type: functionType, Arguments: arguments}, nil
}

func joinStrings(array []interface{}) string {
	var stringsArray []string
	for _, elem := range array {
		str, ok := elem.(string)
		if !ok {
			continue
		}
		stringsArray = append(stringsArray, str)
	}

	return strings.Join(stringsArray, "")
}

func combineExpressions(ex1 interface{}, exs interface{}, operation parsers.LogicalExpressionType) (interface{}, error) {
	if exs == nil || len(exs.([]interface{})) < 1 {
		return ex1, nil
	}

	return parsers.LogicalExpression{
		Expressions: append([]interface{}{ex1}, exs.([]interface{})...),
		Operation:   operation,
	}, nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "Input",
			pos:  position{line: 183, col: 1, offset: 5304},
			expr: &actionExpr{
				pos: position{line: 183, col: 10, offset: 5313},
				run: (*parser).callonInput1,
				expr: &labeledExpr{
					pos:   position{line: 183, col: 10, offset: 5313},
					label: "selectStmt",
					expr: &ruleRefExpr{
						pos:  position{line: 183, col: 21, offset: 5324},
						name: "SelectStmt",
					},
				},
			},
		},
		{
			name: "SelectStmt",
			pos:  position{line: 187, col: 1, offset: 5367},
			expr: &actionExpr{
				pos: position{line: 187, col: 15, offset: 5381},
				run: (*parser).callonSelectStmt1,
				expr: &seqExpr{
					pos: position{line: 187, col: 15, offset: 5381},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 187, col: 15, offset: 5381},
							name: "Select",
						},
						&ruleRefExpr{
							pos:  position{line: 187, col: 22, offset: 5388},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 188, col: 5, offset: 5395},
							label: "distinctClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 188, col: 20, offset: 5410},
								expr: &ruleRefExpr{
									pos:  position{line: 188, col: 20, offset: 5410},
									name: "DistinctClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 188, col: 36, offset: 5426},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 189, col: 5, offset: 5433},
							label: "topClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 189, col: 15, offset: 5443},
								expr: &ruleRefExpr{
									pos:  position{line: 189, col: 15, offset: 5443},
									name: "TopClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 189, col: 26, offset: 5454},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 190, col: 5, offset: 5461},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 13, offset: 5469},
								name: "Selection",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 190, col: 23, offset: 5479},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 191, col: 5, offset: 5486},
							label: "fromClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 191, col: 16, offset: 5497},
								expr: &ruleRefExpr{
									pos:  position{line: 191, col: 16, offset: 5497},
									name: "FromClause",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 191, col: 28, offset: 5509},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 192, col: 5, offset: 5516},
							label: "joinClauses",
							expr: &zeroOrMoreExpr{
								pos: position{line: 192, col: 17, offset: 5528},
								expr: &actionExpr{
									pos: position{line: 192, col: 18, offset: 5529},
									run: (*parser).callonSelectStmt22,
									expr: &seqExpr{
										pos: position{line: 192, col: 18, offset: 5529},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 192, col: 18, offset: 5529},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 192, col: 21, offset: 5532},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 192, col: 26, offset: 5537},
													name: "JoinClause",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 192, col: 60, offset: 5571},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 5, offset: 5578},
							label: "whereClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 193, col: 17, offset: 5590},
								expr: &actionExpr{
									pos: position{line: 193, col: 18, offset: 5591},
									run: (*parser).callonSelectStmt30,
									expr: &seqExpr{
										pos: position{line: 193, col: 18, offset: 5591},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 193, col: 18, offset: 5591},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 193, col: 21, offset: 5594},
												name: "Where",
											},
											&ruleRefExpr{
												pos:  position{line: 193, col: 27, offset: 5600},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 193, col: 30, offset: 5603},
												label: "condition",
												expr: &ruleRefExpr{
													pos:  position{line: 193, col: 40, offset: 5613},
													name: "Condition",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 5, offset: 5655},
							label: "groupByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 19, offset: 5669},
								expr: &actionExpr{
									pos: position{line: 194, col: 20, offset: 5670},
									run: (*parser).callonSelectStmt39,
									expr: &seqExpr{
										pos: position{line: 194, col: 20, offset: 5670},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 194, col: 20, offset: 5670},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 194, col: 23, offset: 5673},
												name: "GroupBy",
											},
											&ruleRefExpr{
												pos:  position{line: 194, col: 31, offset: 5681},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 194, col: 34, offset: 5684},
												label: "columns",
												expr: &ruleRefExpr{
													pos:  position{line: 194, col: 42, offset: 5692},
													name: "ColumnList",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 5, offset: 5733},
							label: "orderByClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 195, col: 19, offset: 5747},
								expr: &actionExpr{
									pos: position{line: 195, col: 20, offset: 5748},
									run: (*parser).callonSelectStmt48,
									expr: &seqExpr{
										pos: position{line: 195, col: 20, offset: 5748},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 195, col: 20, offset: 5748},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 195, col: 23, offset: 5751},
												label: "order",
												expr: &ruleRefExpr{
													pos:  position{line: 195, col: 29, offset: 5757},
													name: "OrderByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 5, offset: 5799},
							label: "offsetClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 196, col: 18, offset: 5812},
								expr: &actionExpr{
									pos: position{line: 196, col: 19, offset: 5813},
									run: (*parser).callonSelectStmt55,
									expr: &seqExpr{
										pos: position{line: 196, col: 19, offset: 5813},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 196, col: 19, offset: 5813},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 196, col: 22, offset: 5816},
												label: "offset",
												expr: &ruleRefExpr{
													pos:  position{line: 196, col: 29, offset: 5823},
													name: "OffsetClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DistinctClause",
			pos:  position{line: 201, col: 1, offset: 6018},
			expr: &litMatcher{
				pos:        position{line: 201, col: 19, offset: 6036},
				val:        "distinct",
				ignoreCase: true,
				want:       "\"DISTINCT\"i",
			},
		},
		{
			name: "TopClause",
			pos:  position{line: 203, col: 1, offset: 6049},
			expr: &actionExpr{
				pos: position{line: 203, col: 14, offset: 6062},
				run: (*parser).callonTopClause1,
				expr: &seqExpr{
					pos: position{line: 203, col: 14, offset: 6062},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 203, col: 14, offset: 6062},
							name: "Top",
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 18, offset: 6066},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 203, col: 21, offset: 6069},
							label: "count",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 27, offset: 6075},
								name: "Integer",
							},
						},
					},
				},
			},
		},
		{
			name: "FromClause",
			pos:  position{line: 207, col: 1, offset: 6110},
			expr: &choiceExpr{
				pos: position{line: 207, col: 15, offset: 6124},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 207, col: 15, offset: 6124},
						run: (*parser).callonFromClause2,
						expr: &seqExpr{
							pos: position{line: 207, col: 15, offset: 6124},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 207, col: 15, offset: 6124},
									name: "From",
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 20, offset: 6129},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 207, col: 23, offset: 6132},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 29, offset: 6138},
										name: "TableName",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 39, offset: 6148},
									label: "selectItem",
									expr: &actionExpr{
										pos: position{line: 207, col: 51, offset: 6160},
										run: (*parser).callonFromClause9,
										expr: &seqExpr{
											pos: position{line: 207, col: 51, offset: 6160},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 207, col: 51, offset: 6160},
													name: "ws",
												},
												&ruleRefExpr{
													pos:  position{line: 207, col: 54, offset: 6163},
													name: "In",
												},
												&ruleRefExpr{
													pos:  position{line: 207, col: 57, offset: 6166},
													name: "ws",
												},
												&labeledExpr{
													pos:   position{line: 207, col: 60, offset: 6169},
													label: "column",
													expr: &ruleRefExpr{
														pos:  position{line: 207, col: 67, offset: 6176},
														name: "SelectItemWithAlias",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6429},
						run: (*parser).callonFromClause16,
						expr: &seqExpr{
							pos: position{line: 216, col: 5, offset: 6429},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 216, col: 5, offset: 6429},
									name: "From",
								},
								&ruleRefExpr{
									pos:  position{line: 216, col: 10, offset: 6434},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 216, col: 13, offset: 6437},
									label: "column",
									expr: &ruleRefExpr{
										pos:  position{line: 216, col: 20, offset: 6444},
										name: "SelectItemWithAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 6652},
						run: (*parser).callonFromClause22,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 6652},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 223, col: 5, offset: 6652},
									name: "From",
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 10, offset: 6657},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 13, offset: 6660},
									label: "subQuery",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 22, offset: 6669},
										name: "SubQuerySelectItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubQuery",
			pos:  position{line: 232, col: 1, offset: 6871},
			expr: &actionExpr{
				pos: position{line: 232, col: 13, offset: 6883},
				run: (*parser).callonSubQuery1,
				expr: &seqExpr{
					pos: position{line: 232, col: 13, offset: 6883},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 232, col: 13, offset: 6883},
							label: "exists",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 20, offset: 6890},
								expr: &actionExpr{
									pos: position{line: 232, col: 21, offset: 6891},
									run: (*parser).callonSubQuery5,
									expr: &seqExpr{
										pos: position{line: 232, col: 21, offset: 6891},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 232, col: 21, offset: 6891},
												label: "exists",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 28, offset: 6898},
													name: "Exists",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 35, offset: 6905},
												name: "ws",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 63, offset: 6933},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 67, offset: 6937},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 70, offset: 6940},
							label: "selectStmt",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 81, offset: 6951},
								name: "SelectStmt",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 92, offset: 6962},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 232, col: 95, offset: 6965},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SubQuerySelectItem",
			pos:  position{line: 241, col: 1, offset: 7177},
			expr: &actionExpr{
				pos: position{line: 241, col: 23, offset: 7199},
				run: (*parser).callonSubQuerySelectItem1,
				expr: &seqExpr{
					pos: position{line: 241, col: 23, offset: 7199},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 241, col: 23, offset: 7199},
							label: "subQuery",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 32, offset: 7208},
								name: "SubQuery",
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 41, offset: 7217},
							label: "asClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 241, col: 50, offset: 7226},
								expr: &actionExpr{
									pos: position{line: 241, col: 51, offset: 7227},
									run: (*parser).callonSubQuerySelectItem7,
									expr: &seqExpr{
										pos: position{line: 241, col: 51, offset: 7227},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 241, col: 51, offset: 7227},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 241, col: 54, offset: 7230},
												label: "alias",
												expr: &ruleRefExpr{
													pos:  position{line: 241, col: 60, offset: 7236},
													name: "AsClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinClause",
			pos:  position{line: 254, col: 1, offset: 7521},
			expr: &choiceExpr{
				pos: position{line: 254, col: 15, offset: 7535},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 254, col: 15, offset: 7535},
						run: (*parser).callonJoinClause2,
						expr: &seqExpr{
							pos: position{line: 254, col: 15, offset: 7535},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 254, col: 15, offset: 7535},
									name: "Join",
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 20, offset: 7540},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 254, col: 23, offset: 7543},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 254, col: 29, offset: 7549},
										name: "TableName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 39, offset: 7559},
									name: "ws",
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 42, offset: 7562},
									name: "In",
								},
								&ruleRefExpr{
									pos:  position{line: 254, col: 45, offset: 7565},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 254, col: 48, offset: 7568},
									label: "column",
									expr: &ruleRefExpr{
										pos:  position{line: 254, col: 55, offset: 7575},
										name: "SelectItemWithAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 7636},
						run: (*parser).callonJoinClause13,
						expr: &seqExpr{
							pos: position{line: 256, col: 5, offset: 7636},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 256, col: 5, offset: 7636},
									name: "Join",
								},
								&ruleRefExpr{
									pos:  position{line: 256, col: 10, offset: 7641},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 256, col: 13, offset: 7644},
									label: "subQuery",
									expr: &ruleRefExpr{
										pos:  position{line: 256, col: 22, offset: 7653},
										name: "SubQuerySelectItem",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OffsetClause",
			pos:  position{line: 260, col: 1, offset: 7712},
			expr: &actionExpr{
				pos: position{line: 260, col: 17, offset: 7728},
				run: (*parser).callonOffsetClause1,
				expr: &seqExpr{
					pos: position{line: 260, col: 17, offset: 7728},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 260, col: 17, offset: 7728},
							name: "Offset",
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 24, offset: 7735},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 27, offset: 7738},
							label: "offset",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 34, offset: 7745},
								name: "IntegerLiteral",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 49, offset: 7760},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 260, col: 52, offset: 7763},
							val:        "limit",
							ignoreCase: true,
							want:       "\"LIMIT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 61, offset: 7772},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 64, offset: 7775},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 70, offset: 7781},
								name: "IntegerLiteral",
							},
						},
					},
				},
			},
		},
		{
			name: "Selection",
			pos:  position{line: 264, col: 1, offset: 7896},
			expr: &choiceExpr{
				pos: position{line: 264, col: 14, offset: 7909},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 264, col: 14, offset: 7909},
						name: "SelectValueSpec",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 32, offset: 7927},
						name: "ColumnList",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 45, offset: 7940},
						name: "SelectAsterisk",
					},
				},
			},
		},
		{
			name: "SelectAsterisk",
			pos:  position{line: 266, col: 1, offset: 7956},
			expr: &actionExpr{
				pos: position{line: 266, col: 19, offset: 7974},
				run: (*parser).callonSelectAsterisk1,
				expr: &litMatcher{
					pos:        position{line: 266, col: 19, offset: 7974},
					val:        "*",
					ignoreCase: false,
					want:       "\"*\"",
				},
			},
		},
		{
			name: "ColumnList",
			pos:  position{line: 272, col: 1, offset: 8172},
			expr: &actionExpr{
				pos: position{line: 272, col: 15, offset: 8186},
				run: (*parser).callonColumnList1,
				expr: &seqExpr{
					pos: position{line: 272, col: 15, offset: 8186},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 272, col: 15, offset: 8186},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 22, offset: 8193},
								name: "ExpressionOrSelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 45, offset: 8216},
							label: "other_columns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 272, col: 59, offset: 8230},
								expr: &actionExpr{
									pos: position{line: 272, col: 60, offset: 8231},
									run: (*parser).callonColumnList7,
									expr: &seqExpr{
										pos: position{line: 272, col: 60, offset: 8231},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 272, col: 60, offset: 8231},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 272, col: 63, offset: 8234},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 272, col: 67, offset: 8238},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 272, col: 70, offset: 8241},
												label: "coll",
												expr: &ruleRefExpr{
													pos:  position{line: 272, col: 75, offset: 8246},
													name: "ExpressionOrSelectItem",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExpressionOrSelectItem",
			pos:  position{line: 276, col: 1, offset: 8345},
			expr: &choiceExpr{
				pos: position{line: 276, col: 27, offset: 8371},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 276, col: 27, offset: 8371},
						run: (*parser).callonExpressionOrSelectItem2,
						expr: &seqExpr{
							pos: position{line: 276, col: 27, offset: 8371},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 276, col: 27, offset: 8371},
									label: "expression",
									expr: &ruleRefExpr{
										pos:  position{line: 276, col: 38, offset: 8382},
										name: "OrExpression",
									},
								},
								&labeledExpr{
									pos:   position{line: 276, col: 51, offset: 8395},
									label: "asClause",
									expr: &zeroOrOneExpr{
										pos: position{line: 276, col: 60, offset: 8404},
										expr: &ruleRefExpr{
											pos:  position{line: 276, col: 60, offset: 8404},
											name: "AsClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 297, col: 5, offset: 9019},
						run: (*parser).callonExpressionOrSelectItem9,
						expr: &labeledExpr{
							pos:   position{line: 297, col: 5, offset: 9019},
							label: "item",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 10, offset: 9024},
								name: "SelectItemWithAlias",
							},
						},
					},
				},
			},
		},
		{
			name: "SelectValueSpec",
			pos:  position{line: 299, col: 1, offset: 9066},
			expr: &actionExpr{
				pos: position{line: 299, col: 20, offset: 9085},
				run: (*parser).callonSelectValueSpec1,
				expr: &seqExpr{
					pos: position{line: 299, col: 20, offset: 9085},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 299, col: 20, offset: 9085},
							val:        "value",
							ignoreCase: true,
							want:       "\"VALUE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 29, offset: 9094},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 32, offset: 9097},
							label: "column",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 39, offset: 9104},
								name: "SelectItemWithAlias",
							},
						},
					},
				},
			},
		},
		{
			name: "TableName",
			pos:  position{line: 305, col: 1, offset: 9270},
			expr: &actionExpr{
				pos: position{line: 305, col: 14, offset: 9283},
				run: (*parser).callonTableName1,
				expr: &labeledExpr{
					pos:   position{line: 305, col: 14, offset: 9283},
					label: "key",
					expr: &ruleRefExpr{
						pos:  position{line: 305, col: 18, offset: 9287},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "SelectArray",
			pos:  position{line: 309, col: 1, offset: 9354},
			expr: &actionExpr{
				pos: position{line: 309, col: 16, offset: 9369},
				run: (*parser).callonSelectArray1,
				expr: &seqExpr{
					pos: position{line: 309, col: 16, offset: 9369},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 309, col: 16, offset: 9369},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 20, offset: 9373},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 23, offset: 9376},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 31, offset: 9384},
								name: "ColumnList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 42, offset: 9395},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 309, col: 45, offset: 9398},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "SelectObject",
			pos:  position{line: 313, col: 1, offset: 9443},
			expr: &choiceExpr{
				pos: position{line: 313, col: 17, offset: 9459},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 313, col: 17, offset: 9459},
						run: (*parser).callonSelectObject2,
						expr: &seqExpr{
							pos: position{line: 313, col: 17, offset: 9459},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 313, col: 17, offset: 9459},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&ruleRefExpr{
									pos:  position{line: 313, col: 21, offset: 9463},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 313, col: 24, offset: 9466},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 313, col: 30, offset: 9472},
										name: "SelectObjectField",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 313, col: 48, offset: 9490},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 313, col: 51, offset: 9493},
									label: "other_fields",
									expr: &zeroOrMoreExpr{
										pos: position{line: 313, col: 64, offset: 9506},
										expr: &actionExpr{
											pos: position{line: 313, col: 65, offset: 9507},
											run: (*parser).callonSelectObject11,
											expr: &seqExpr{
												pos: position{line: 313, col: 65, offset: 9507},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 313, col: 65, offset: 9507},
														name: "ws",
													},
													&litMatcher{
														pos:        position{line: 313, col: 68, offset: 9510},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&ruleRefExpr{
														pos:  position{line: 313, col: 72, offset: 9514},
														name: "ws",
													},
													&labeledExpr{
														pos:   position{line: 313, col: 75, offset: 9517},
														label: "coll",
														expr: &ruleRefExpr{
															pos:  position{line: 313, col: 80, offset: 9522},
															name: "SelectObjectField",
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 313, col: 120, offset: 9562},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 313, col: 123, offset: 9565},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 9624},
						run: (*parser).callonSelectObject20,
						expr: &seqExpr{
							pos: position{line: 315, col: 5, offset: 9624},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 315, col: 5, offset: 9624},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&ruleRefExpr{
									pos:  position{line: 315, col: 9, offset: 9628},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 315, col: 12, offset: 9631},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectObjectField",
			pos:  position{line: 322, col: 1, offset: 9778},
			expr: &actionExpr{
				pos: position{line: 322, col: 22, offset: 9799},
				run: (*parser).callonSelectObjectField1,
				expr: &seqExpr{
					pos: position{line: 322, col: 22, offset: 9799},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 322, col: 22, offset: 9799},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 322, col: 28, offset: 9805},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 322, col: 28, offset: 9805},
										name: "Identifier",
									},
									&actionExpr{
										pos: position{line: 322, col: 41, offset: 9818},
										run: (*parser).callonSelectObjectField6,
										expr: &seqExpr{
											pos: position{line: 322, col: 41, offset: 9818},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 322, col: 41, offset: 9818},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
												&labeledExpr{
													pos:   position{line: 322, col: 46, offset: 9823},
													label: "key",
													expr: &ruleRefExpr{
														pos:  position{line: 322, col: 50, offset: 9827},
														name: "Identifier",
													},
												},
												&litMatcher{
													pos:        position{line: 322, col: 61, offset: 9838},
													val:        "\"",
													ignoreCase: false,
													want:       "\"\\\"\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 87, offset: 9864},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 322, col: 90, offset: 9867},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 94, offset: 9871},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 97, offset: 9874},
							label: "selectItem",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 108, offset: 9885},
								name: "SelectItem",
							},
						},
					},
				},
			},
		},
		{
			name: "SelectProperty",
			pos:  position{line: 328, col: 1, offset: 9997},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10015},
				run: (*parser).callonSelectProperty1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10015},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 10015},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 24, offset: 10020},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 35, offset: 10031},
							label: "path",
							expr: &zeroOrMoreExpr{
								pos: position{line: 328, col: 40, offset: 10036},
								expr: &choiceExpr{
									pos: position{line: 328, col: 41, offset: 10037},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 328, col: 41, offset: 10037},
											name: "DotFieldAccess",
										},
										&ruleRefExpr{
											pos:  position{line: 328, col: 58, offset: 10054},
											name: "ArrayFieldAccess",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectItemWithAlias",
			pos:  position{line: 332, col: 1, offset: 10145},
			expr: &actionExpr{
				pos: position{line: 332, col: 24, offset: 10168},
				run: (*parser).callonSelectItemWithAlias1,
				expr: &seqExpr{
					pos: position{line: 332, col: 24, offset: 10168},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 332, col: 24, offset: 10168},
							label: "selectItem",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 35, offset: 10179},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 46, offset: 10190},
							label: "asClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 55, offset: 10199},
								expr: &ruleRefExpr{
									pos:  position{line: 332, col: 55, offset: 10199},
									name: "AsClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectItem",
			pos:  position{line: 340, col: 1, offset: 10366},
			expr: &actionExpr{
				pos: position{line: 340, col: 15, offset: 10380},
				run: (*parser).callonSelectItem1,
				expr: &labeledExpr{
					pos:   position{line: 340, col: 15, offset: 10380},
					label: "selectItem",
					expr: &choiceExpr{
						pos: position{line: 340, col: 27, offset: 10392},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 340, col: 27, offset: 10392},
								name: "SubQuerySelectItem",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 48, offset: 10413},
								name: "Literal",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 58, offset: 10423},
								name: "FunctionCall",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 73, offset: 10438},
								name: "SelectArray",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 87, offset: 10452},
								name: "SelectObject",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 102, offset: 10467},
								name: "SelectProperty",
							},
						},
					},
				},
			},
		},
		{
			name: "AsClause",
			pos:  position{line: 360, col: 1, offset: 10992},
			expr: &actionExpr{
				pos: position{line: 360, col: 13, offset: 11004},
				run: (*parser).callonAsClause1,
				expr: &seqExpr{
					pos: position{line: 360, col: 13, offset: 11004},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 360, col: 13, offset: 11004},
							expr: &seqExpr{
								pos: position{line: 360, col: 14, offset: 11005},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 360, col: 14, offset: 11005},
										name: "ws",
									},
									&ruleRefExpr{
										pos:  position{line: 360, col: 17, offset: 11008},
										name: "As",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 22, offset: 11013},
							name: "ws",
						},
						&notExpr{
							pos: position{line: 360, col: 25, offset: 11016},
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 26, offset: 11017},
								name: "ExcludedKeywords",
							},
						},
						&labeledExpr{
							pos:   position{line: 360, col: 43, offset: 11034},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 49, offset: 11040},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "ExcludedKeywords",
			pos:  position{line: 364, col: 1, offset: 11078},
			expr: &choiceExpr{
				pos: position{line: 364, col: 21, offset: 11098},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 364, col: 21, offset: 11098},
						name: "Select",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 30, offset: 11107},
						name: "Top",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 36, offset: 11113},
						name: "As",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 41, offset: 11118},
						name: "From",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 48, offset: 11125},
						name: "In",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 53, offset: 11130},
						name: "Join",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 60, offset: 11137},
						name: "Exists",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 69, offset: 11146},
						name: "Where",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 77, offset: 11154},
						name: "And",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 83, offset: 11160},
						name: "Or",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 88, offset: 11165},
						name: "Not",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 94, offset: 11171},
						name: "GroupBy",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 104, offset: 11181},
						name: "OrderBy",
					},
					&ruleRefExpr{
						pos:  position{line: 364, col: 114, offset: 11191},
						name: "Offset",
					},
				},
			},
		},
		{
			name: "DotFieldAccess",
			pos:  position{line: 366, col: 1, offset: 11199},
			expr: &actionExpr{
				pos: position{line: 366, col: 19, offset: 11217},
				run: (*parser).callonDotFieldAccess1,
				expr: &seqExpr{
					pos: position{line: 366, col: 19, offset: 11217},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 366, col: 19, offset: 11217},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 23, offset: 11221},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 26, offset: 11224},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "ArrayFieldAccess",
			pos:  position{line: 370, col: 1, offset: 11259},
			expr: &choiceExpr{
				pos: position{line: 370, col: 21, offset: 11279},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 370, col: 21, offset: 11279},
						run: (*parser).callonArrayFieldAccess2,
						expr: &seqExpr{
							pos: position{line: 370, col: 21, offset: 11279},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 370, col: 21, offset: 11279},
									val:        "[\"",
									ignoreCase: false,
									want:       "\"[\\\"\"",
								},
								&labeledExpr{
									pos:   position{line: 370, col: 27, offset: 11285},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 30, offset: 11288},
										name: "Identifier",
									},
								},
								&litMatcher{
									pos:        position{line: 370, col: 41, offset: 11299},
									val:        "\"]",
									ignoreCase: false,
									want:       "\"\\\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 11328},
						run: (*parser).callonArrayFieldAccess8,
						expr: &seqExpr{
							pos: position{line: 371, col: 5, offset: 11328},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 371, col: 5, offset: 11328},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 371, col: 9, offset: 11332},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 371, col: 12, offset: 11335},
										name: "Integer",
									},
								},
								&litMatcher{
									pos:        position{line: 371, col: 20, offset: 11343},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 11390},
						run: (*parser).callonArrayFieldAccess14,
						expr: &seqExpr{
							pos: position{line: 372, col: 5, offset: 11390},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 372, col: 5, offset: 11390},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 372, col: 9, offset: 11394},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 372, col: 12, offset: 11397},
										name: "ParameterConstant",
									},
								},
								&litMatcher{
									pos:        position{line: 372, col: 30, offset: 11415},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 374, col: 1, offset: 11473},
			expr: &actionExpr{
				pos: position{line: 374, col: 15, offset: 11487},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 374, col: 15, offset: 11487},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 374, col: 15, offset: 11487},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 24, offset: 11496},
							expr: &charClassMatcher{
								pos:        position{line: 374, col: 24, offset: 11496},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Condition",
			pos:  position{line: 378, col: 1, offset: 11546},
			expr: &actionExpr{
				pos: position{line: 378, col: 14, offset: 11559},
				run: (*parser).callonCondition1,
				expr: &labeledExpr{
					pos:   position{line: 378, col: 14, offset: 11559},
					label: "expression",
					expr: &ruleRefExpr{
						pos:  position{line: 378, col: 25, offset: 11570},
						name: "OrExpression",
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 382, col: 1, offset: 11615},
			expr: &actionExpr{
				pos: position{line: 382, col: 17, offset: 11631},
				run: (*parser).callonOrExpression1,
				expr: &seqExpr{
					pos: position{line: 382, col: 17, offset: 11631},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 382, col: 17, offset: 11631},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 21, offset: 11635},
								name: "AndExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 382, col: 35, offset: 11649},
							label: "ex2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 382, col: 39, offset: 11653},
								expr: &actionExpr{
									pos: position{line: 382, col: 40, offset: 11654},
									run: (*parser).callonOrExpression7,
									expr: &seqExpr{
										pos: position{line: 382, col: 40, offset: 11654},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 382, col: 40, offset: 11654},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 382, col: 43, offset: 11657},
												name: "Or",
											},
											&ruleRefExpr{
												pos:  position{line: 382, col: 46, offset: 11660},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 382, col: 49, offset: 11663},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 382, col: 52, offset: 11666},
													name: "AndExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 386, col: 1, offset: 11779},
			expr: &actionExpr{
				pos: position{line: 386, col: 18, offset: 11796},
				run: (*parser).callonAndExpression1,
				expr: &seqExpr{
					pos: position{line: 386, col: 18, offset: 11796},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 386, col: 18, offset: 11796},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 22, offset: 11800},
								name: "ComparisonExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 43, offset: 11821},
							label: "ex2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 386, col: 47, offset: 11825},
								expr: &actionExpr{
									pos: position{line: 386, col: 48, offset: 11826},
									run: (*parser).callonAndExpression7,
									expr: &seqExpr{
										pos: position{line: 386, col: 48, offset: 11826},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 386, col: 48, offset: 11826},
												name: "ws",
											},
											&ruleRefExpr{
												pos:  position{line: 386, col: 51, offset: 11829},
												name: "And",
											},
											&ruleRefExpr{
												pos:  position{line: 386, col: 55, offset: 11833},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 386, col: 58, offset: 11836},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 386, col: 61, offset: 11839},
													name: "ComparisonExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpression",
			pos:  position{line: 390, col: 1, offset: 11960},
			expr: &choiceExpr{
				pos: position{line: 390, col: 25, offset: 11984},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 390, col: 25, offset: 11984},
						run: (*parser).callonComparisonExpression2,
						expr: &seqExpr{
							pos: position{line: 390, col: 25, offset: 11984},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 390, col: 25, offset: 11984},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 390, col: 29, offset: 11988},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 390, col: 32, offset: 11991},
									label: "ex",
									expr: &ruleRefExpr{
										pos:  position{line: 390, col: 35, offset: 11994},
										name: "OrExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 390, col: 48, offset: 12007},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 390, col: 51, offset: 12010},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 391, col: 7, offset: 12039},
						run: (*parser).callonComparisonExpression10,
						expr: &seqExpr{
							pos: position{line: 391, col: 7, offset: 12039},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 391, col: 7, offset: 12039},
									label: "left",
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 12, offset: 12044},
										name: "SelectItem",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 23, offset: 12055},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 391, col: 26, offset: 12058},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 29, offset: 12061},
										name: "ComparisonOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 48, offset: 12080},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 391, col: 51, offset: 12083},
									label: "right",
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 57, offset: 12089},
										name: "SelectItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 12196},
						run: (*parser).callonComparisonExpression20,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 12196},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 393, col: 5, offset: 12196},
									label: "inv",
									expr: &zeroOrOneExpr{
										pos: position{line: 393, col: 9, offset: 12200},
										expr: &seqExpr{
											pos: position{line: 393, col: 10, offset: 12201},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 393, col: 10, offset: 12201},
													name: "Not",
												},
												&ruleRefExpr{
													pos:  position{line: 393, col: 14, offset: 12205},
													name: "ws",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 393, col: 19, offset: 12210},
									label: "ex",
									expr: &ruleRefExpr{
										pos:  position{line: 393, col: 22, offset: 12213},
										name: "SelectItem",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 12364},
						run: (*parser).callonComparisonExpression29,
						expr: &labeledExpr{
							pos:   position{line: 400, col: 5, offset: 12364},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 8, offset: 12367},
								name: "BooleanLiteral",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderByClause",
			pos:  position{line: 402, col: 1, offset: 12402},
			expr: &actionExpr{
				pos: position{line: 402, col: 18, offset: 12419},
				run: (*parser).callonOrderByClause1,
				expr: &seqExpr{
					pos: position{line: 402, col: 18, offset: 12419},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 402, col: 18, offset: 12419},
							name: "OrderBy",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 26, offset: 12427},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 29, offset: 12430},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 33, offset: 12434},
								name: "OrderExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 49, offset: 12450},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 402, col: 56, offset: 12457},
								expr: &actionExpr{
									pos: position{line: 402, col: 57, offset: 12458},
									run: (*parser).callonOrderByClause9,
									expr: &seqExpr{
										pos: position{line: 402, col: 57, offset: 12458},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 402, col: 57, offset: 12458},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 402, col: 60, offset: 12461},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 402, col: 64, offset: 12465},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 402, col: 67, offset: 12468},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 402, col: 70, offset: 12471},
													name: "OrderExpression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderExpression",
			pos:  position{line: 406, col: 1, offset: 12555},
			expr: &actionExpr{
				pos: position{line: 406, col: 20, offset: 12574},
				run: (*parser).callonOrderExpression1,
				expr: &seqExpr{
					pos: position{line: 406, col: 20, offset: 12574},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 406, col: 20, offset: 12574},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 26, offset: 12580},
								name: "SelectProperty",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 41, offset: 12595},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 44, offset: 12598},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 50, offset: 12604},
								expr: &ruleRefExpr{
									pos:  position{line: 406, col: 50, offset: 12604},
									name: "OrderDirection",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderDirection",
			pos:  position{line: 410, col: 1, offset: 12670},
			expr: &actionExpr{
				pos: position{line: 410, col: 19, offset: 12688},
				run: (*parser).callonOrderDirection1,
				expr: &choiceExpr{
					pos: position{line: 410, col: 20, offset: 12689},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 410, col: 20, offset: 12689},
							val:        "asc",
							ignoreCase: true,
							want:       "\"ASC\"i",
						},
						&litMatcher{
							pos:        position{line: 410, col: 29, offset: 12698},
							val:        "desc",
							ignoreCase: true,
							want:       "\"DESC\"i",
						},
					},
				},
			},
		},
		{
			name: "Select",
			pos:  position{line: 418, col: 1, offset: 12859},
			expr: &litMatcher{
				pos:        position{line: 418, col: 11, offset: 12869},
				val:        "select",
				ignoreCase: true,
				want:       "\"SELECT\"i",
			},
		},
		{
			name: "Top",
			pos:  position{line: 420, col: 1, offset: 12880},
			expr: &litMatcher{
				pos:        position{line: 420, col: 8, offset: 12887},
				val:        "top",
				ignoreCase: true,
				want:       "\"TOP\"i",
			},
		},
		{
			name: "As",
			pos:  position{line: 422, col: 1, offset: 12895},
			expr: &litMatcher{
				pos:        position{line: 422, col: 7, offset: 12901},
				val:        "as",
				ignoreCase: true,
				want:       "\"AS\"i",
			},
		},
		{
			name: "From",
			pos:  position{line: 424, col: 1, offset: 12908},
			expr: &litMatcher{
				pos:        position{line: 424, col: 9, offset: 12916},
				val:        "from",
				ignoreCase: true,
				want:       "\"FROM\"i",
			},
		},
		{
			name: "In",
			pos:  position{line: 426, col: 1, offset: 12925},
			expr: &litMatcher{
				pos:        position{line: 426, col: 7, offset: 12931},
				val:        "in",
				ignoreCase: true,
				want:       "\"IN\"i",
			},
		},
		{
			name: "Join",
			pos:  position{line: 428, col: 1, offset: 12938},
			expr: &litMatcher{
				pos:        position{line: 428, col: 9, offset: 12946},
				val:        "join",
				ignoreCase: true,
				want:       "\"JOIN\"i",
			},
		},
		{
			name: "Exists",
			pos:  position{line: 430, col: 1, offset: 12955},
			expr: &litMatcher{
				pos:        position{line: 430, col: 11, offset: 12965},
				val:        "exists",
				ignoreCase: true,
				want:       "\"EXISTS\"i",
			},
		},
		{
			name: "Where",
			pos:  position{line: 432, col: 1, offset: 12976},
			expr: &litMatcher{
				pos:        position{line: 432, col: 10, offset: 12985},
				val:        "where",
				ignoreCase: true,
				want:       "\"WHERE\"i",
			},
		},
		{
			name: "And",
			pos:  position{line: 434, col: 1, offset: 12995},
			expr: &litMatcher{
				pos:        position{line: 434, col: 8, offset: 13002},
				val:        "and",
				ignoreCase: true,
				want:       "\"AND\"i",
			},
		},
		{
			name: "Or",
			pos:  position{line: 436, col: 1, offset: 13010},
			expr: &seqExpr{
				pos: position{line: 436, col: 7, offset: 13016},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 436, col: 7, offset: 13016},
						val:        "or",
						ignoreCase: true,
						want:       "\"OR\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 13, offset: 13022},
						name: "wss",
					},
				},
			},
		},
		{
			name: "Not",
			pos:  position{line: 438, col: 1, offset: 13027},
			expr: &litMatcher{
				pos:        position{line: 438, col: 8, offset: 13034},
				val:        "not",
				ignoreCase: true,
				want:       "\"NOT\"i",
			},
		},
		{
			name: "GroupBy",
			pos:  position{line: 440, col: 1, offset: 13042},
			expr: &seqExpr{
				pos: position{line: 440, col: 12, offset: 13053},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 440, col: 12, offset: 13053},
						val:        "group",
						ignoreCase: true,
						want:       "\"GROUP\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 440, col: 21, offset: 13062},
						name: "ws",
					},
					&litMatcher{
						pos:        position{line: 440, col: 24, offset: 13065},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
				},
			},
		},
		{
			name: "OrderBy",
			pos:  position{line: 442, col: 1, offset: 13072},
			expr: &seqExpr{
				pos: position{line: 442, col: 12, offset: 13083},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 442, col: 12, offset: 13083},
						val:        "order",
						ignoreCase: true,
						want:       "\"ORDER\"i",
					},
					&ruleRefExpr{
						pos:  position{line: 442, col: 21, offset: 13092},
						name: "ws",
					},
					&litMatcher{
						pos:        position{line: 442, col: 24, offset: 13095},
						val:        "by",
						ignoreCase: true,
						want:       "\"BY\"i",
					},
				},
			},
		},
		{
			name: "Offset",
			pos:  position{line: 444, col: 1, offset: 13102},
			expr: &litMatcher{
				pos:        position{line: 444, col: 11, offset: 13112},
				val:        "offset",
				ignoreCase: true,
				want:       "\"OFFSET\"i",
			},
		},
		{
			name: "ComparisonOperator",
			pos:  position{line: 446, col: 1, offset: 13123},
			expr: &actionExpr{
				pos: position{line: 446, col: 23, offset: 13145},
				run: (*parser).callonComparisonOperator1,
				expr: &choiceExpr{
					pos: position{line: 446, col: 24, offset: 13146},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 446, col: 24, offset: 13146},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
						&litMatcher{
							pos:        position{line: 446, col: 31, offset: 13153},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
						&litMatcher{
							pos:        position{line: 446, col: 38, offset: 13160},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&litMatcher{
							pos:        position{line: 446, col: 44, offset: 13166},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&litMatcher{
							pos:        position{line: 446, col: 51, offset: 13173},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 446, col: 57, offset: 13179},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 450, col: 1, offset: 13220},
			expr: &choiceExpr{
				pos: position{line: 450, col: 12, offset: 13231},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 450, col: 12, offset: 13231},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 27, offset: 13246},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 44, offset: 13263},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 60, offset: 13279},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 77, offset: 13296},
						name: "ParameterConstant",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 97, offset: 13316},
						name: "NullConstant",
					},
				},
			},
		},
		{
			name: "ParameterConstant",
			pos:  position{line: 452, col: 1, offset: 13330},
			expr: &actionExpr{
				pos: position{line: 452, col: 22, offset: 13351},
				run: (*parser).callonParameterConstant1,
				expr: &seqExpr{
					pos: position{line: 452, col: 22, offset: 13351},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 452, col: 22, offset: 13351},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 26, offset: 13355},
							name: "Identifier",
						},
					},
				},
			},
		},
		{
			name: "NullConstant",
			pos:  position{line: 455, col: 1, offset: 13471},
			expr: &actionExpr{
				pos: position{line: 455, col: 17, offset: 13487},
				run: (*parser).callonNullConstant1,
				expr: &litMatcher{
					pos:        position{line: 455, col: 17, offset: 13487},
					val:        "null",
					ignoreCase: true,
					want:       "\"null\"i",
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 459, col: 1, offset: 13545},
			expr: &actionExpr{
				pos: position{line: 459, col: 19, offset: 13563},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 459, col: 19, offset: 13563},
					label: "number",
					expr: &ruleRefExpr{
						pos:  position{line: 459, col: 26, offset: 13570},
						name: "Integer",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 462, col: 1, offset: 13671},
			expr: &actionExpr{
				pos: position{line: 462, col: 18, offset: 13688},
				run: (*parser).callonStringLiteral1,
				expr: &seqExpr{
					pos: position{line: 462, col: 18, offset: 13688},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 462, col: 18, offset: 13688},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 23, offset: 13693},
							label: "chars",
							expr: &zeroOrMoreExpr{
								pos: position{line: 462, col: 29, offset: 13699},
								expr: &ruleRefExpr{
									pos:  position{line: 462, col: 29, offset: 13699},
									name: "StringCharacter",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 462, col: 46, offset: 13716},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 465, col: 1, offset: 13834},
			expr: &actionExpr{
				pos: position{line: 465, col: 17, offset: 13850},
				run: (*parser).callonFloatLiteral1,
				expr: &seqExpr{
					pos: position{line: 465, col: 17, offset: 13850},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 465, col: 17, offset: 13850},
							expr: &charClassMatcher{
								pos:        position{line: 465, col: 17, offset: 13850},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 465, col: 23, offset: 13856},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 465, col: 26, offset: 13859},
							expr: &charClassMatcher{
								pos:        position{line: 465, col: 26, offset: 13859},
								val:        "[0-9]",
								ranges:     []rune{'0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 469, col: 1, offset: 14015},
			expr: &actionExpr{
				pos: position{line: 469, col: 19, offset: 14033},
				run: (*parser).callonBooleanLiteral1,
				expr: &choiceExpr{
					pos: position{line: 469, col: 20, offset: 14034},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 469, col: 20, offset: 14034},
							val:        "true",
							ignoreCase: true,
							want:       "\"true\"i",
						},
						&litMatcher{
							pos:        position{line: 469, col: 30, offset: 14044},
							val:        "false",
							ignoreCase: true,
							want:       "\"false\"i",
						},
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 474, col: 1, offset: 14199},
			expr: &choiceExpr{
				pos: position{line: 474, col: 17, offset: 14215},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 474, col: 17, offset: 14215},
						name: "StringFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 475, col: 7, offset: 14237},
						name: "TypeCheckingFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 476, col: 7, offset: 14265},
						name: "ArrayFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 7, offset: 14286},
						name: "ConditionalFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 478, col: 7, offset: 14313},
						name: "InFunction",
					},
					&ruleRefExpr{
						pos:  position{line: 479, col: 7, offset: 14330},
						name: "AggregateFunctions",
					},
					&ruleRefExpr{
						pos:  position{line: 480, col: 7, offset: 14355},
						name: "MathFunctions",
					},
				},
			},
		},
		{
			name: "StringFunctions",
			pos:  position{line: 482, col: 1, offset: 14370},
			expr: &choiceExpr{
				pos: position{line: 482, col: 20, offset: 14389},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 482, col: 20, offset: 14389},
						name: "StringEqualsExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 7, offset: 14418},
						name: "ToStringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 484, col: 7, offset: 14443},
						name: "ConcatExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 7, offset: 14466},
						name: "ThreeArgumentStringFunctionExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 7, offset: 14510},
						name: "UpperExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 7, offset: 14532},
						name: "LowerExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 488, col: 7, offset: 14554},
						name: "LeftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 7, offset: 14575},
						name: "LengthExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 490, col: 7, offset: 14598},
						name: "LTrimExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 7, offset: 14620},
						name: "ReplaceExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 7, offset: 14644},
						name: "ReplicateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 7, offset: 14670},
						name: "ReverseExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 7, offset: 14694},
						name: "RightExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 495, col: 7, offset: 14716},
						name: "RTrimExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 7, offset: 14738},
						name: "SubstringExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 497, col: 7, offset: 14764},
						name: "TrimExpression",
					},
				},
			},
		},
		{
			name: "TypeCheckingFunctions",
			pos:  position{line: 499, col: 1, offset: 14780},
			expr: &choiceExpr{
				pos: position{line: 499, col: 26, offset: 14805},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 499, col: 26, offset: 14805},
						name: "IsDefined",
					},
					&ruleRefExpr{
						pos:  position{line: 500, col: 7, offset: 14821},
						name: "IsArray",
					},
					&ruleRefExpr{
						pos:  position{line: 501, col: 7, offset: 14835},
						name: "IsBool",
					},
					&ruleRefExpr{
						pos:  position{line: 502, col: 7, offset: 14848},
						name: "IsFiniteNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 7, offset: 14869},
						name: "IsInteger",
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 7, offset: 14885},
						name: "IsNull",
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 7, offset: 14898},
						name: "IsNumber",
					},
					&ruleRefExpr{
						pos:  position{line: 506, col: 7, offset: 14913},
						name: "IsObject",
					},
					&ruleRefExpr{
						pos:  position{line: 507, col: 7, offset: 14928},
						name: "IsPrimitive",
					},
					&ruleRefExpr{
						pos:  position{line: 508, col: 7, offset: 14946},
						name: "IsString",
					},
				},
			},
		},
		{
			name: "AggregateFunctions",
			pos:  position{line: 510, col: 1, offset: 14956},
			expr: &choiceExpr{
				pos: position{line: 510, col: 23, offset: 14978},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 510, col: 23, offset: 14978},
						name: "AvgAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 511, col: 7, offset: 15007},
						name: "CountAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 512, col: 7, offset: 15038},
						name: "MaxAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 513, col: 7, offset: 15067},
						name: "MinAggregateExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 7, offset: 15096},
						name: "SumAggregateExpression",
					},
				},
			},
		},
		{
			name: "ArrayFunctions",
			pos:  position{line: 516, col: 1, offset: 15120},
			expr: &choiceExpr{
				pos: position{line: 516, col: 19, offset: 15138},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 516, col: 19, offset: 15138},
						name: "ArrayConcatExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 7, offset: 15166},
						name: "ArrayContainsExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 7, offset: 15196},
						name: "ArrayContainsAnyExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 519, col: 7, offset: 15229},
						name: "ArrayContainsAllExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 7, offset: 15262},
						name: "ArrayLengthExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 521, col: 7, offset: 15290},
						name: "ArraySliceExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 7, offset: 15317},
						name: "SetIntersectExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 523, col: 7, offset: 15346},
						name: "SetUnionExpression",
					},
				},
			},
		},
		{
			name: "ConditionalFunctions",
			pos:  position{line: 525, col: 1, offset: 15366},
			expr: &ruleRefExpr{
				pos:  position{line: 525, col: 25, offset: 15390},
				name: "IifExpression",
			},
		},
		{
			name: "MathFunctions",
			pos:  position{line: 527, col: 1, offset: 15405},
			expr: &choiceExpr{
				pos: position{line: 527, col: 18, offset: 15422},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 527, col: 18, offset: 15422},
						name: "MathAbsExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 528, col: 7, offset: 15446},
						name: "MathAcosExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 529, col: 7, offset: 15471},
						name: "MathAsinExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 530, col: 7, offset: 15496},
						name: "MathAtanExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 531, col: 7, offset: 15521},
						name: "MathCeilingExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 532, col: 7, offset: 15549},
						name: "MathCosExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 533, col: 7, offset: 15573},
						name: "MathCotExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 534, col: 7, offset: 15597},
						name: "MathDegreesExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 535, col: 7, offset: 15625},
						name: "MathExpExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 536, col: 7, offset: 15649},
						name: "MathFloorExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 537, col: 7, offset: 15675},
						name: "MathIntBitNotExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 538, col: 7, offset: 15705},
						name: "MathLog10Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 539, col: 7, offset: 15731},
						name: "MathRadiansExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 540, col: 7, offset: 15759},
						name: "MathRoundExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 7, offset: 15785},
						name: "MathSignExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 542, col: 7, offset: 15810},
						name: "MathSinExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 7, offset: 15834},
						name: "MathSqrtExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 7, offset: 15859},
						name: "MathSquareExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 7, offset: 15886},
						name: "MathTanExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 7, offset: 15910},
						name: "MathTruncExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 7, offset: 15936},
						name: "MathAtn2Expression",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 7, offset: 15961},
						name: "MathIntAddExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 549, col: 7, offset: 15988},
						name: "MathIntBitAndExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 7, offset: 16018},
						name: "MathIntBitLeftShiftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 7, offset: 16054},
						name: "MathIntBitOrExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 7, offset: 16083},
						name: "MathIntBitRightShiftExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 553, col: 7, offset: 16120},
						name: "MathIntBitXorExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 7, offset: 16150},
						name: "MathIntDivExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 555, col: 7, offset: 16177},
						name: "MathIntModExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 556, col: 7, offset: 16204},
						name: "MathIntMulExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 557, col: 7, offset: 16231},
						name: "MathIntSubExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 558, col: 7, offset: 16258},
						name: "MathPowerExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 559, col: 7, offset: 16284},
						name: "MathLogExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 560, col: 7, offset: 16308},
						name: "MathNumberBinExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 7, offset: 16338},
						name: "MathPiExpression",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 7, offset: 16361},
						name: "MathRandExpression",
					},
				},
			},
		},
		{
			name: "UpperExpression",
			pos:  position{line: 564, col: 1, offset: 16381},
			expr: &actionExpr{
				pos: position{line: 564, col: 20, offset: 16400},
				run: (*parser).callonUpperExpression1,
				expr: &seqExpr{
					pos: position{line: 564, col: 20, offset: 16400},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 564, col: 20, offset: 16400},
							val:        "upper",
							ignoreCase: true,
							want:       "\"UPPER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 564, col: 29, offset: 16409},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 564, col: 32, offset: 16412},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 36, offset: 16416},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 39, offset: 16419},
								name: "SelectItem",
							},
						},
						&litMatcher{
							pos:        position{line: 564, col: 50, offset: 16430},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LowerExpression",
			pos:  position{line: 568, col: 1, offset: 16515},
			expr: &actionExpr{
				pos: position{line: 568, col: 20, offset: 16534},
				run: (*parser).callonLowerExpression1,
				expr: &seqExpr{
					pos: position{line: 568, col: 20, offset: 16534},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 568, col: 20, offset: 16534},
							val:        "lower",
							ignoreCase: true,
							want:       "\"LOWER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 29, offset: 16543},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 568, col: 32, offset: 16546},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 36, offset: 16550},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 39, offset: 16553},
								name: "SelectItem",
							},
						},
						&litMatcher{
							pos:        position{line: 568, col: 50, offset: 16564},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "StringEqualsExpression",
			pos:  position{line: 572, col: 1, offset: 16649},
			expr: &actionExpr{
				pos: position{line: 572, col: 27, offset: 16675},
				run: (*parser).callonStringEqualsExpression1,
				expr: &seqExpr{
					pos: position{line: 572, col: 27, offset: 16675},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 572, col: 27, offset: 16675},
							val:        "stringequals",
							ignoreCase: true,
							want:       "\"STRINGEQUALS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 43, offset: 16691},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 572, col: 46, offset: 16694},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 50, offset: 16698},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 53, offset: 16701},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 57, offset: 16705},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 68, offset: 16716},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 572, col: 71, offset: 16719},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 75, offset: 16723},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 78, offset: 16726},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 82, offset: 16730},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 93, offset: 16741},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 96, offset: 16744},
							label: "ignoreCase",
							expr: &zeroOrOneExpr{
								pos: position{line: 572, col: 107, offset: 16755},
								expr: &actionExpr{
									pos: position{line: 572, col: 108, offset: 16756},
									run: (*parser).callonStringEqualsExpression17,
									expr: &seqExpr{
										pos: position{line: 572, col: 108, offset: 16756},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 572, col: 108, offset: 16756},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 572, col: 112, offset: 16760},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 572, col: 115, offset: 16763},
												label: "boolean",
												expr: &ruleRefExpr{
													pos:  position{line: 572, col: 123, offset: 16771},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 572, col: 160, offset: 16808},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ToStringExpression",
			pos:  position{line: 576, col: 1, offset: 16918},
			expr: &actionExpr{
				pos: position{line: 576, col: 23, offset: 16940},
				run: (*parser).callonToStringExpression1,
				expr: &seqExpr{
					pos: position{line: 576, col: 23, offset: 16940},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 576, col: 23, offset: 16940},
							val:        "tostring",
							ignoreCase: true,
							want:       "\"TOSTRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 35, offset: 16952},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 576, col: 38, offset: 16955},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 42, offset: 16959},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 45, offset: 16962},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 48, offset: 16965},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 59, offset: 16976},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 576, col: 62, offset: 16979},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ConcatExpression",
			pos:  position{line: 580, col: 1, offset: 17067},
			expr: &actionExpr{
				pos: position{line: 580, col: 21, offset: 17087},
				run: (*parser).callonConcatExpression1,
				expr: &seqExpr{
					pos: position{line: 580, col: 21, offset: 17087},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 580, col: 21, offset: 17087},
							val:        "concat",
							ignoreCase: true,
							want:       "\"CONCAT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 580, col: 31, offset: 17097},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 580, col: 34, offset: 17100},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 580, col: 38, offset: 17104},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 580, col: 41, offset: 17107},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 45, offset: 17111},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 56, offset: 17122},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 580, col: 63, offset: 17129},
								expr: &actionExpr{
									pos: position{line: 580, col: 64, offset: 17130},
									run: (*parser).callonConcatExpression11,
									expr: &seqExpr{
										pos: position{line: 580, col: 64, offset: 17130},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 580, col: 64, offset: 17130},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 580, col: 67, offset: 17133},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 580, col: 71, offset: 17137},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 580, col: 74, offset: 17140},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 580, col: 77, offset: 17143},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 580, col: 109, offset: 17175},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 580, col: 112, offset: 17178},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LeftExpression",
			pos:  position{line: 585, col: 1, offset: 17327},
			expr: &actionExpr{
				pos: position{line: 585, col: 19, offset: 17345},
				run: (*parser).callonLeftExpression1,
				expr: &seqExpr{
					pos: position{line: 585, col: 19, offset: 17345},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 585, col: 19, offset: 17345},
							val:        "left",
							ignoreCase: true,
							want:       "\"LEFT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 27, offset: 17353},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 585, col: 30, offset: 17356},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 34, offset: 17360},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 37, offset: 17363},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 40, offset: 17366},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 51, offset: 17377},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 585, col: 54, offset: 17380},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 58, offset: 17384},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 61, offset: 17387},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 68, offset: 17394},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 79, offset: 17405},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 585, col: 82, offset: 17408},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LengthExpression",
			pos:  position{line: 589, col: 1, offset: 17500},
			expr: &actionExpr{
				pos: position{line: 589, col: 21, offset: 17520},
				run: (*parser).callonLengthExpression1,
				expr: &seqExpr{
					pos: position{line: 589, col: 21, offset: 17520},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 589, col: 21, offset: 17520},
							val:        "length",
							ignoreCase: true,
							want:       "\"LENGTH\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 31, offset: 17530},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 589, col: 34, offset: 17533},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 38, offset: 17537},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 589, col: 41, offset: 17540},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 589, col: 44, offset: 17543},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 589, col: 55, offset: 17554},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 589, col: 58, offset: 17557},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LTrimExpression",
			pos:  position{line: 593, col: 1, offset: 17643},
			expr: &actionExpr{
				pos: position{line: 593, col: 20, offset: 17662},
				run: (*parser).callonLTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 593, col: 20, offset: 17662},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 593, col: 20, offset: 17662},
							val:        "ltrim",
							ignoreCase: true,
							want:       "\"LTRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 29, offset: 17671},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 593, col: 32, offset: 17674},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 36, offset: 17678},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 39, offset: 17681},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 42, offset: 17684},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 53, offset: 17695},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 593, col: 56, offset: 17698},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReplaceExpression",
			pos:  position{line: 597, col: 1, offset: 17783},
			expr: &actionExpr{
				pos: position{line: 597, col: 22, offset: 17804},
				run: (*parser).callonReplaceExpression1,
				expr: &seqExpr{
					pos: position{line: 597, col: 22, offset: 17804},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 597, col: 22, offset: 17804},
							val:        "replace",
							ignoreCase: true,
							want:       "\"REPLACE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 33, offset: 17815},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 597, col: 36, offset: 17818},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 40, offset: 17822},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 43, offset: 17825},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 47, offset: 17829},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 58, offset: 17840},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 597, col: 61, offset: 17843},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 65, offset: 17847},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 68, offset: 17850},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 72, offset: 17854},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 83, offset: 17865},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 597, col: 86, offset: 17868},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 90, offset: 17872},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 93, offset: 17875},
							label: "ex3",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 97, offset: 17879},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 108, offset: 17890},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 597, col: 111, offset: 17893},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReplicateExpression",
			pos:  position{line: 601, col: 1, offset: 17991},
			expr: &actionExpr{
				pos: position{line: 601, col: 24, offset: 18014},
				run: (*parser).callonReplicateExpression1,
				expr: &seqExpr{
					pos: position{line: 601, col: 24, offset: 18014},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 601, col: 24, offset: 18014},
							val:        "replicate",
							ignoreCase: true,
							want:       "\"REPLICATE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 37, offset: 18027},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 601, col: 40, offset: 18030},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 44, offset: 18034},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 47, offset: 18037},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 51, offset: 18041},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 62, offset: 18052},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 601, col: 65, offset: 18055},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 69, offset: 18059},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 601, col: 72, offset: 18062},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 76, offset: 18066},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 601, col: 87, offset: 18077},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 601, col: 90, offset: 18080},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ReverseExpression",
			pos:  position{line: 605, col: 1, offset: 18175},
			expr: &actionExpr{
				pos: position{line: 605, col: 22, offset: 18196},
				run: (*parser).callonReverseExpression1,
				expr: &seqExpr{
					pos: position{line: 605, col: 22, offset: 18196},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 605, col: 22, offset: 18196},
							val:        "reverse",
							ignoreCase: true,
							want:       "\"REVERSE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 33, offset: 18207},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 605, col: 36, offset: 18210},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 40, offset: 18214},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 43, offset: 18217},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 46, offset: 18220},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 57, offset: 18231},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 605, col: 60, offset: 18234},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "RightExpression",
			pos:  position{line: 609, col: 1, offset: 18321},
			expr: &actionExpr{
				pos: position{line: 609, col: 20, offset: 18340},
				run: (*parser).callonRightExpression1,
				expr: &seqExpr{
					pos: position{line: 609, col: 20, offset: 18340},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 609, col: 20, offset: 18340},
							val:        "right",
							ignoreCase: true,
							want:       "\"RIGHT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 29, offset: 18349},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 609, col: 32, offset: 18352},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 36, offset: 18356},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 609, col: 39, offset: 18359},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 42, offset: 18362},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 53, offset: 18373},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 609, col: 56, offset: 18376},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 60, offset: 18380},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 609, col: 63, offset: 18383},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 70, offset: 18390},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 81, offset: 18401},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 609, col: 84, offset: 18404},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "RTrimExpression",
			pos:  position{line: 613, col: 1, offset: 18497},
			expr: &actionExpr{
				pos: position{line: 613, col: 20, offset: 18516},
				run: (*parser).callonRTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 613, col: 20, offset: 18516},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 613, col: 20, offset: 18516},
							val:        "rtrim",
							ignoreCase: true,
							want:       "\"RTRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 29, offset: 18525},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 613, col: 32, offset: 18528},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 36, offset: 18532},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 39, offset: 18535},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 42, offset: 18538},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 53, offset: 18549},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 613, col: 56, offset: 18552},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SubstringExpression",
			pos:  position{line: 617, col: 1, offset: 18637},
			expr: &actionExpr{
				pos: position{line: 617, col: 24, offset: 18660},
				run: (*parser).callonSubstringExpression1,
				expr: &seqExpr{
					pos: position{line: 617, col: 24, offset: 18660},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 617, col: 24, offset: 18660},
							val:        "substring",
							ignoreCase: true,
							want:       "\"SUBSTRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 37, offset: 18673},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 40, offset: 18676},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 44, offset: 18680},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 47, offset: 18683},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 50, offset: 18686},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 61, offset: 18697},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 64, offset: 18700},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 68, offset: 18704},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 71, offset: 18707},
							label: "startPos",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 80, offset: 18716},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 91, offset: 18727},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 94, offset: 18730},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 98, offset: 18734},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 101, offset: 18737},
							label: "length",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 108, offset: 18744},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 119, offset: 18755},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 617, col: 122, offset: 18758},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "TrimExpression",
			pos:  position{line: 621, col: 1, offset: 18865},
			expr: &actionExpr{
				pos: position{line: 621, col: 19, offset: 18883},
				run: (*parser).callonTrimExpression1,
				expr: &seqExpr{
					pos: position{line: 621, col: 19, offset: 18883},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 621, col: 19, offset: 18883},
							val:        "trim",
							ignoreCase: true,
							want:       "\"TRIM\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 27, offset: 18891},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 621, col: 30, offset: 18894},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 34, offset: 18898},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 621, col: 37, offset: 18901},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 40, offset: 18904},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 621, col: 51, offset: 18915},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 621, col: 54, offset: 18918},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ThreeArgumentStringFunctionExpression",
			pos:  position{line: 625, col: 1, offset: 19002},
			expr: &actionExpr{
				pos: position{line: 625, col: 42, offset: 19043},
				run: (*parser).callonThreeArgumentStringFunctionExpression1,
				expr: &seqExpr{
					pos: position{line: 625, col: 42, offset: 19043},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 625, col: 42, offset: 19043},
							label: "function",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 51, offset: 19052},
								name: "ThreeArgumentStringFunction",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 79, offset: 19080},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 625, col: 82, offset: 19083},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 86, offset: 19087},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 89, offset: 19090},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 93, offset: 19094},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 104, offset: 19105},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 625, col: 107, offset: 19108},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 111, offset: 19112},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 114, offset: 19115},
							label: "ex2",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 118, offset: 19119},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 129, offset: 19130},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 132, offset: 19133},
							label: "ignoreCase",
							expr: &zeroOrOneExpr{
								pos: position{line: 625, col: 143, offset: 19144},
								expr: &actionExpr{
									pos: position{line: 625, col: 144, offset: 19145},
									run: (*parser).callonThreeArgumentStringFunctionExpression18,
									expr: &seqExpr{
										pos: position{line: 625, col: 144, offset: 19145},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 625, col: 144, offset: 19145},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 625, col: 148, offset: 19149},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 625, col: 151, offset: 19152},
												label: "boolean",
												expr: &ruleRefExpr{
													pos:  position{line: 625, col: 159, offset: 19160},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 625, col: 196, offset: 19197},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ThreeArgumentStringFunction",
			pos:  position{line: 643, col: 1, offset: 19719},
			expr: &actionExpr{
				pos: position{line: 643, col: 32, offset: 19750},
				run: (*parser).callonThreeArgumentStringFunction1,
				expr: &choiceExpr{
					pos: position{line: 643, col: 33, offset: 19751},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 643, col: 33, offset: 19751},
							val:        "contains",
							ignoreCase: true,
							want:       "\"CONTAINS\"i",
						},
						&litMatcher{
							pos:        position{line: 643, col: 47, offset: 19765},
							val:        "endswith",
							ignoreCase: true,
							want:       "\"ENDSWITH\"i",
						},
						&litMatcher{
							pos:        position{line: 643, col: 61, offset: 19779},
							val:        "startswith",
							ignoreCase: true,
							want:       "\"STARTSWITH\"i",
						},
						&litMatcher{
							pos:        position{line: 643, col: 77, offset: 19795},
							val:        "index_of",
							ignoreCase: true,
							want:       "\"INDEX_OF\"i",
						},
					},
				},
			},
		},
		{
			name: "IsDefined",
			pos:  position{line: 647, col: 1, offset: 19844},
			expr: &actionExpr{
				pos: position{line: 647, col: 14, offset: 19857},
				run: (*parser).callonIsDefined1,
				expr: &seqExpr{
					pos: position{line: 647, col: 14, offset: 19857},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 647, col: 14, offset: 19857},
							val:        "is_defined",
							ignoreCase: true,
							want:       "\"IS_DEFINED\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 28, offset: 19871},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 647, col: 31, offset: 19874},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 35, offset: 19878},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 647, col: 38, offset: 19881},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 41, offset: 19884},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 52, offset: 19895},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 647, col: 55, offset: 19898},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsArray",
			pos:  position{line: 651, col: 1, offset: 19987},
			expr: &actionExpr{
				pos: position{line: 651, col: 12, offset: 19998},
				run: (*parser).callonIsArray1,
				expr: &seqExpr{
					pos: position{line: 651, col: 12, offset: 19998},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 651, col: 12, offset: 19998},
							val:        "is_array",
							ignoreCase: true,
							want:       "\"IS_ARRAY\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 24, offset: 20010},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 651, col: 27, offset: 20013},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 31, offset: 20017},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 651, col: 34, offset: 20020},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 37, offset: 20023},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 48, offset: 20034},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 651, col: 51, offset: 20037},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsBool",
			pos:  position{line: 655, col: 1, offset: 20124},
			expr: &actionExpr{
				pos: position{line: 655, col: 11, offset: 20134},
				run: (*parser).callonIsBool1,
				expr: &seqExpr{
					pos: position{line: 655, col: 11, offset: 20134},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 655, col: 11, offset: 20134},
							val:        "is_bool",
							ignoreCase: true,
							want:       "\"IS_BOOL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 22, offset: 20145},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 655, col: 25, offset: 20148},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 29, offset: 20152},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 655, col: 32, offset: 20155},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 35, offset: 20158},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 46, offset: 20169},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 655, col: 49, offset: 20172},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsFiniteNumber",
			pos:  position{line: 659, col: 1, offset: 20258},
			expr: &actionExpr{
				pos: position{line: 659, col: 19, offset: 20276},
				run: (*parser).callonIsFiniteNumber1,
				expr: &seqExpr{
					pos: position{line: 659, col: 19, offset: 20276},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 659, col: 19, offset: 20276},
							val:        "is_finite_number",
							ignoreCase: true,
							want:       "\"IS_FINITE_NUMBER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 659, col: 39, offset: 20296},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 659, col: 42, offset: 20299},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 659, col: 46, offset: 20303},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 659, col: 49, offset: 20306},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 52, offset: 20309},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 659, col: 63, offset: 20320},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 659, col: 66, offset: 20323},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsInteger",
			pos:  position{line: 663, col: 1, offset: 20417},
			expr: &actionExpr{
				pos: position{line: 663, col: 14, offset: 20430},
				run: (*parser).callonIsInteger1,
				expr: &seqExpr{
					pos: position{line: 663, col: 14, offset: 20430},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 663, col: 14, offset: 20430},
							val:        "is_integer",
							ignoreCase: true,
							want:       "\"IS_INTEGER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 28, offset: 20444},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 663, col: 31, offset: 20447},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 35, offset: 20451},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 663, col: 38, offset: 20454},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 41, offset: 20457},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 52, offset: 20468},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 663, col: 55, offset: 20471},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsNull",
			pos:  position{line: 667, col: 1, offset: 20560},
			expr: &actionExpr{
				pos: position{line: 667, col: 11, offset: 20570},
				run: (*parser).callonIsNull1,
				expr: &seqExpr{
					pos: position{line: 667, col: 11, offset: 20570},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 667, col: 11, offset: 20570},
							val:        "is_null",
							ignoreCase: true,
							want:       "\"IS_NULL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 667, col: 22, offset: 20581},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 667, col: 25, offset: 20584},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 667, col: 29, offset: 20588},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 667, col: 32, offset: 20591},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 35, offset: 20594},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 667, col: 46, offset: 20605},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 667, col: 49, offset: 20608},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsNumber",
			pos:  position{line: 671, col: 1, offset: 20694},
			expr: &actionExpr{
				pos: position{line: 671, col: 13, offset: 20706},
				run: (*parser).callonIsNumber1,
				expr: &seqExpr{
					pos: position{line: 671, col: 13, offset: 20706},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 671, col: 13, offset: 20706},
							val:        "is_number",
							ignoreCase: true,
							want:       "\"IS_NUMBER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 671, col: 26, offset: 20719},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 671, col: 29, offset: 20722},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 671, col: 33, offset: 20726},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 671, col: 36, offset: 20729},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 39, offset: 20732},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 671, col: 50, offset: 20743},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 671, col: 53, offset: 20746},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsObject",
			pos:  position{line: 675, col: 1, offset: 20834},
			expr: &actionExpr{
				pos: position{line: 675, col: 13, offset: 20846},
				run: (*parser).callonIsObject1,
				expr: &seqExpr{
					pos: position{line: 675, col: 13, offset: 20846},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 675, col: 13, offset: 20846},
							val:        "is_object",
							ignoreCase: true,
							want:       "\"IS_OBJECT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 26, offset: 20859},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 675, col: 29, offset: 20862},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 33, offset: 20866},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 36, offset: 20869},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 39, offset: 20872},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 50, offset: 20883},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 675, col: 53, offset: 20886},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsPrimitive",
			pos:  position{line: 679, col: 1, offset: 20974},
			expr: &actionExpr{
				pos: position{line: 679, col: 16, offset: 20989},
				run: (*parser).callonIsPrimitive1,
				expr: &seqExpr{
					pos: position{line: 679, col: 16, offset: 20989},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 679, col: 16, offset: 20989},
							val:        "is_primitive",
							ignoreCase: true,
							want:       "\"IS_PRIMITIVE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 32, offset: 21005},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 679, col: 35, offset: 21008},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 39, offset: 21012},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 42, offset: 21015},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 45, offset: 21018},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 56, offset: 21029},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 679, col: 59, offset: 21032},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IsString",
			pos:  position{line: 683, col: 1, offset: 21123},
			expr: &actionExpr{
				pos: position{line: 683, col: 13, offset: 21135},
				run: (*parser).callonIsString1,
				expr: &seqExpr{
					pos: position{line: 683, col: 13, offset: 21135},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 683, col: 13, offset: 21135},
							val:        "is_string",
							ignoreCase: true,
							want:       "\"IS_STRING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 683, col: 26, offset: 21148},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 683, col: 29, offset: 21151},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 683, col: 33, offset: 21155},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 683, col: 36, offset: 21158},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 39, offset: 21161},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 683, col: 50, offset: 21172},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 683, col: 53, offset: 21175},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayConcatExpression",
			pos:  position{line: 687, col: 1, offset: 21263},
			expr: &actionExpr{
				pos: position{line: 687, col: 26, offset: 21288},
				run: (*parser).callonArrayConcatExpression1,
				expr: &seqExpr{
					pos: position{line: 687, col: 26, offset: 21288},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 687, col: 26, offset: 21288},
							val:        "array_concat",
							ignoreCase: true,
							want:       "\"ARRAY_CONCAT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 42, offset: 21304},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 687, col: 45, offset: 21307},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 49, offset: 21311},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 687, col: 52, offset: 21314},
							label: "arrays",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 59, offset: 21321},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 70, offset: 21332},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 687, col: 77, offset: 21339},
								expr: &actionExpr{
									pos: position{line: 687, col: 78, offset: 21340},
									run: (*parser).callonArrayConcatExpression11,
									expr: &seqExpr{
										pos: position{line: 687, col: 78, offset: 21340},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 687, col: 78, offset: 21340},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 687, col: 81, offset: 21343},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 687, col: 85, offset: 21347},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 687, col: 88, offset: 21350},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 687, col: 91, offset: 21353},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 123, offset: 21385},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 687, col: 126, offset: 21388},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayContainsExpression",
			pos:  position{line: 691, col: 1, offset: 21518},
			expr: &actionExpr{
				pos: position{line: 691, col: 28, offset: 21545},
				run: (*parser).callonArrayContainsExpression1,
				expr: &seqExpr{
					pos: position{line: 691, col: 28, offset: 21545},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 691, col: 28, offset: 21545},
							val:        "array_contains",
							ignoreCase: true,
							want:       "\"ARRAY_CONTAINS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 46, offset: 21563},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 691, col: 49, offset: 21566},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 53, offset: 21570},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 56, offset: 21573},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 62, offset: 21579},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 73, offset: 21590},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 691, col: 76, offset: 21593},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 80, offset: 21597},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 83, offset: 21600},
							label: "item",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 88, offset: 21605},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 99, offset: 21616},
							label: "partialMatch",
							expr: &zeroOrOneExpr{
								pos: position{line: 691, col: 112, offset: 21629},
								expr: &actionExpr{
									pos: position{line: 691, col: 113, offset: 21630},
									run: (*parser).callonArrayContainsExpression16,
									expr: &seqExpr{
										pos: position{line: 691, col: 113, offset: 21630},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 691, col: 113, offset: 21630},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 691, col: 116, offset: 21633},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 691, col: 120, offset: 21637},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 691, col: 123, offset: 21640},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 691, col: 126, offset: 21643},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 158, offset: 21675},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 691, col: 161, offset: 21678},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayContainsAnyExpression",
			pos:  position{line: 695, col: 1, offset: 21794},
			expr: &actionExpr{
				pos: position{line: 695, col: 31, offset: 21824},
				run: (*parser).callonArrayContainsAnyExpression1,
				expr: &seqExpr{
					pos: position{line: 695, col: 31, offset: 21824},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 695, col: 31, offset: 21824},
							val:        "array_contains_any",
							ignoreCase: true,
							want:       "\"ARRAY_CONTAINS_ANY\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 53, offset: 21846},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 695, col: 56, offset: 21849},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 60, offset: 21853},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 695, col: 63, offset: 21856},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 69, offset: 21862},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 80, offset: 21873},
							label: "items",
							expr: &oneOrMoreExpr{
								pos: position{line: 695, col: 86, offset: 21879},
								expr: &actionExpr{
									pos: position{line: 695, col: 87, offset: 21880},
									run: (*parser).callonArrayContainsAnyExpression11,
									expr: &seqExpr{
										pos: position{line: 695, col: 87, offset: 21880},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 695, col: 87, offset: 21880},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 695, col: 90, offset: 21883},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 695, col: 94, offset: 21887},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 695, col: 97, offset: 21890},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 695, col: 100, offset: 21893},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 132, offset: 21925},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 695, col: 135, offset: 21928},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayContainsAllExpression",
			pos:  position{line: 699, col: 1, offset: 22061},
			expr: &actionExpr{
				pos: position{line: 699, col: 31, offset: 22091},
				run: (*parser).callonArrayContainsAllExpression1,
				expr: &seqExpr{
					pos: position{line: 699, col: 31, offset: 22091},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 699, col: 31, offset: 22091},
							val:        "array_contains_all",
							ignoreCase: true,
							want:       "\"ARRAY_CONTAINS_ALL\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 53, offset: 22113},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 699, col: 56, offset: 22116},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 60, offset: 22120},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 699, col: 63, offset: 22123},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 69, offset: 22129},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 80, offset: 22140},
							label: "items",
							expr: &oneOrMoreExpr{
								pos: position{line: 699, col: 86, offset: 22146},
								expr: &actionExpr{
									pos: position{line: 699, col: 87, offset: 22147},
									run: (*parser).callonArrayContainsAllExpression11,
									expr: &seqExpr{
										pos: position{line: 699, col: 87, offset: 22147},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 699, col: 87, offset: 22147},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 699, col: 90, offset: 22150},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 699, col: 94, offset: 22154},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 699, col: 97, offset: 22157},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 699, col: 100, offset: 22160},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 132, offset: 22192},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 699, col: 135, offset: 22195},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArrayLengthExpression",
			pos:  position{line: 703, col: 1, offset: 22328},
			expr: &actionExpr{
				pos: position{line: 703, col: 26, offset: 22353},
				run: (*parser).callonArrayLengthExpression1,
				expr: &seqExpr{
					pos: position{line: 703, col: 26, offset: 22353},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 703, col: 26, offset: 22353},
							val:        "array_length",
							ignoreCase: true,
							want:       "\"ARRAY_LENGTH\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 42, offset: 22369},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 703, col: 45, offset: 22372},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 49, offset: 22376},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 703, col: 52, offset: 22379},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 58, offset: 22385},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 69, offset: 22396},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 703, col: 72, offset: 22399},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "ArraySliceExpression",
			pos:  position{line: 707, col: 1, offset: 22493},
			expr: &actionExpr{
				pos: position{line: 707, col: 25, offset: 22517},
				run: (*parser).callonArraySliceExpression1,
				expr: &seqExpr{
					pos: position{line: 707, col: 25, offset: 22517},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 707, col: 25, offset: 22517},
							val:        "array_slice",
							ignoreCase: true,
							want:       "\"ARRAY_SLICE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 40, offset: 22532},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 707, col: 43, offset: 22535},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 47, offset: 22539},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 707, col: 50, offset: 22542},
							label: "array",
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 56, offset: 22548},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 67, offset: 22559},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 707, col: 70, offset: 22562},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 74, offset: 22566},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 707, col: 77, offset: 22569},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 83, offset: 22575},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 707, col: 94, offset: 22586},
							label: "length",
							expr: &zeroOrOneExpr{
								pos: position{line: 707, col: 101, offset: 22593},
								expr: &actionExpr{
									pos: position{line: 707, col: 102, offset: 22594},
									run: (*parser).callonArraySliceExpression16,
									expr: &seqExpr{
										pos: position{line: 707, col: 102, offset: 22594},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 707, col: 102, offset: 22594},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 707, col: 105, offset: 22597},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 707, col: 109, offset: 22601},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 707, col: 112, offset: 22604},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 707, col: 115, offset: 22607},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 147, offset: 22639},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 707, col: 150, offset: 22642},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SetIntersectExpression",
			pos:  position{line: 711, col: 1, offset: 22750},
			expr: &actionExpr{
				pos: position{line: 711, col: 27, offset: 22776},
				run: (*parser).callonSetIntersectExpression1,
				expr: &seqExpr{
					pos: position{line: 711, col: 27, offset: 22776},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 711, col: 27, offset: 22776},
							val:        "setintersect",
							ignoreCase: true,
							want:       "\"SetIntersect\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 43, offset: 22792},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 711, col: 46, offset: 22795},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 50, offset: 22799},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 711, col: 53, offset: 22802},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 58, offset: 22807},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 69, offset: 22818},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 711, col: 72, offset: 22821},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 76, offset: 22825},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 711, col: 79, offset: 22828},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 84, offset: 22833},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 711, col: 95, offset: 22844},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 711, col: 98, offset: 22847},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SetUnionExpression",
			pos:  position{line: 715, col: 1, offset: 22947},
			expr: &actionExpr{
				pos: position{line: 715, col: 23, offset: 22969},
				run: (*parser).callonSetUnionExpression1,
				expr: &seqExpr{
					pos: position{line: 715, col: 23, offset: 22969},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 715, col: 23, offset: 22969},
							val:        "setunion",
							ignoreCase: true,
							want:       "\"SetUnion\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 35, offset: 22981},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 715, col: 38, offset: 22984},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 42, offset: 22988},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 715, col: 45, offset: 22991},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 50, offset: 22996},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 61, offset: 23007},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 715, col: 64, offset: 23010},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 68, offset: 23014},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 715, col: 71, offset: 23017},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 76, offset: 23022},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 715, col: 87, offset: 23033},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 715, col: 90, offset: 23036},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "IifExpression",
			pos:  position{line: 719, col: 1, offset: 23132},
			expr: &actionExpr{
				pos: position{line: 719, col: 18, offset: 23149},
				run: (*parser).callonIifExpression1,
				expr: &seqExpr{
					pos: position{line: 719, col: 18, offset: 23149},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 719, col: 18, offset: 23149},
							val:        "iif",
							ignoreCase: true,
							want:       "\"IIF\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 25, offset: 23156},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 719, col: 28, offset: 23159},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 32, offset: 23163},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 719, col: 35, offset: 23166},
							label: "condition",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 45, offset: 23176},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 56, offset: 23187},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 719, col: 59, offset: 23190},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 63, offset: 23194},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 719, col: 66, offset: 23197},
							label: "trueValue",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 76, offset: 23207},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 87, offset: 23218},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 719, col: 90, offset: 23221},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 94, offset: 23225},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 719, col: 97, offset: 23228},
							label: "falseValue",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 108, offset: 23239},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 719, col: 119, offset: 23250},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 719, col: 122, offset: 23253},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAbsExpression",
			pos:  position{line: 723, col: 1, offset: 23366},
			expr: &actionExpr{
				pos: position{line: 723, col: 22, offset: 23387},
				run: (*parser).callonMathAbsExpression1,
				expr: &seqExpr{
					pos: position{line: 723, col: 22, offset: 23387},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 723, col: 22, offset: 23387},
							val:        "abs",
							ignoreCase: true,
							want:       "\"ABS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 723, col: 29, offset: 23394},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 723, col: 32, offset: 23397},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 723, col: 36, offset: 23401},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 723, col: 39, offset: 23404},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 42, offset: 23407},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 723, col: 53, offset: 23418},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 723, col: 56, offset: 23421},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAcosExpression",
			pos:  position{line: 724, col: 1, offset: 23503},
			expr: &actionExpr{
				pos: position{line: 724, col: 23, offset: 23525},
				run: (*parser).callonMathAcosExpression1,
				expr: &seqExpr{
					pos: position{line: 724, col: 23, offset: 23525},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 724, col: 23, offset: 23525},
							val:        "acos",
							ignoreCase: true,
							want:       "\"ACOS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 31, offset: 23533},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 724, col: 34, offset: 23536},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 38, offset: 23540},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 724, col: 41, offset: 23543},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 44, offset: 23546},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 55, offset: 23557},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 724, col: 58, offset: 23560},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAsinExpression",
			pos:  position{line: 725, col: 1, offset: 23643},
			expr: &actionExpr{
				pos: position{line: 725, col: 23, offset: 23665},
				run: (*parser).callonMathAsinExpression1,
				expr: &seqExpr{
					pos: position{line: 725, col: 23, offset: 23665},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 725, col: 23, offset: 23665},
							val:        "asin",
							ignoreCase: true,
							want:       "\"ASIN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 31, offset: 23673},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 725, col: 34, offset: 23676},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 38, offset: 23680},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 725, col: 41, offset: 23683},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 44, offset: 23686},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 55, offset: 23697},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 725, col: 58, offset: 23700},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAtanExpression",
			pos:  position{line: 726, col: 1, offset: 23783},
			expr: &actionExpr{
				pos: position{line: 726, col: 23, offset: 23805},
				run: (*parser).callonMathAtanExpression1,
				expr: &seqExpr{
					pos: position{line: 726, col: 23, offset: 23805},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 726, col: 23, offset: 23805},
							val:        "atan",
							ignoreCase: true,
							want:       "\"ATAN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 726, col: 31, offset: 23813},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 726, col: 34, offset: 23816},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 726, col: 38, offset: 23820},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 726, col: 41, offset: 23823},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 44, offset: 23826},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 726, col: 55, offset: 23837},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 726, col: 58, offset: 23840},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathCeilingExpression",
			pos:  position{line: 727, col: 1, offset: 23923},
			expr: &actionExpr{
				pos: position{line: 727, col: 26, offset: 23948},
				run: (*parser).callonMathCeilingExpression1,
				expr: &seqExpr{
					pos: position{line: 727, col: 26, offset: 23948},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 727, col: 26, offset: 23948},
							val:        "ceiling",
							ignoreCase: true,
							want:       "\"CEILING\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 37, offset: 23959},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 727, col: 40, offset: 23962},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 44, offset: 23966},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 727, col: 47, offset: 23969},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 50, offset: 23972},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 61, offset: 23983},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 727, col: 64, offset: 23986},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathCosExpression",
			pos:  position{line: 728, col: 1, offset: 24072},
			expr: &actionExpr{
				pos: position{line: 728, col: 22, offset: 24093},
				run: (*parser).callonMathCosExpression1,
				expr: &seqExpr{
					pos: position{line: 728, col: 22, offset: 24093},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 728, col: 22, offset: 24093},
							val:        "cos",
							ignoreCase: true,
							want:       "\"COS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 728, col: 29, offset: 24100},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 728, col: 32, offset: 24103},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 728, col: 36, offset: 24107},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 728, col: 39, offset: 24110},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 42, offset: 24113},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 728, col: 53, offset: 24124},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 728, col: 56, offset: 24127},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathCotExpression",
			pos:  position{line: 729, col: 1, offset: 24209},
			expr: &actionExpr{
				pos: position{line: 729, col: 22, offset: 24230},
				run: (*parser).callonMathCotExpression1,
				expr: &seqExpr{
					pos: position{line: 729, col: 22, offset: 24230},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 729, col: 22, offset: 24230},
							val:        "cot",
							ignoreCase: true,
							want:       "\"COT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 29, offset: 24237},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 729, col: 32, offset: 24240},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 36, offset: 24244},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 39, offset: 24247},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 42, offset: 24250},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 53, offset: 24261},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 729, col: 56, offset: 24264},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathDegreesExpression",
			pos:  position{line: 730, col: 1, offset: 24346},
			expr: &actionExpr{
				pos: position{line: 730, col: 26, offset: 24371},
				run: (*parser).callonMathDegreesExpression1,
				expr: &seqExpr{
					pos: position{line: 730, col: 26, offset: 24371},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 730, col: 26, offset: 24371},
							val:        "degrees",
							ignoreCase: true,
							want:       "\"DEGREES\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 37, offset: 24382},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 730, col: 40, offset: 24385},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 44, offset: 24389},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 730, col: 47, offset: 24392},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 50, offset: 24395},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 61, offset: 24406},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 730, col: 64, offset: 24409},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathExpExpression",
			pos:  position{line: 731, col: 1, offset: 24495},
			expr: &actionExpr{
				pos: position{line: 731, col: 22, offset: 24516},
				run: (*parser).callonMathExpExpression1,
				expr: &seqExpr{
					pos: position{line: 731, col: 22, offset: 24516},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 731, col: 22, offset: 24516},
							val:        "exp",
							ignoreCase: true,
							want:       "\"EXP\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 29, offset: 24523},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 731, col: 32, offset: 24526},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 36, offset: 24530},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 39, offset: 24533},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 42, offset: 24536},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 53, offset: 24547},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 731, col: 56, offset: 24550},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathFloorExpression",
			pos:  position{line: 732, col: 1, offset: 24632},
			expr: &actionExpr{
				pos: position{line: 732, col: 24, offset: 24655},
				run: (*parser).callonMathFloorExpression1,
				expr: &seqExpr{
					pos: position{line: 732, col: 24, offset: 24655},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 732, col: 24, offset: 24655},
							val:        "floor",
							ignoreCase: true,
							want:       "\"FLOOR\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 33, offset: 24664},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 732, col: 36, offset: 24667},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 40, offset: 24671},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 732, col: 43, offset: 24674},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 46, offset: 24677},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 57, offset: 24688},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 732, col: 60, offset: 24691},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitNotExpression",
			pos:  position{line: 733, col: 1, offset: 24775},
			expr: &actionExpr{
				pos: position{line: 733, col: 28, offset: 24802},
				run: (*parser).callonMathIntBitNotExpression1,
				expr: &seqExpr{
					pos: position{line: 733, col: 28, offset: 24802},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 733, col: 28, offset: 24802},
							val:        "intbitnot",
							ignoreCase: true,
							want:       "\"IntBitNot\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 41, offset: 24815},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 733, col: 44, offset: 24818},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 48, offset: 24822},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 51, offset: 24825},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 54, offset: 24828},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 65, offset: 24839},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 733, col: 68, offset: 24842},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathLog10Expression",
			pos:  position{line: 734, col: 1, offset: 24930},
			expr: &actionExpr{
				pos: position{line: 734, col: 24, offset: 24953},
				run: (*parser).callonMathLog10Expression1,
				expr: &seqExpr{
					pos: position{line: 734, col: 24, offset: 24953},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 734, col: 24, offset: 24953},
							val:        "log10",
							ignoreCase: true,
							want:       "\"LOG10\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 33, offset: 24962},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 734, col: 36, offset: 24965},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 40, offset: 24969},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 43, offset: 24972},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 46, offset: 24975},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 57, offset: 24986},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 734, col: 60, offset: 24989},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathRadiansExpression",
			pos:  position{line: 735, col: 1, offset: 25073},
			expr: &actionExpr{
				pos: position{line: 735, col: 26, offset: 25098},
				run: (*parser).callonMathRadiansExpression1,
				expr: &seqExpr{
					pos: position{line: 735, col: 26, offset: 25098},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 735, col: 26, offset: 25098},
							val:        "radians",
							ignoreCase: true,
							want:       "\"RADIANS\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 37, offset: 25109},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 735, col: 40, offset: 25112},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 44, offset: 25116},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 735, col: 47, offset: 25119},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 50, offset: 25122},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 735, col: 61, offset: 25133},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 735, col: 64, offset: 25136},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathRoundExpression",
			pos:  position{line: 736, col: 1, offset: 25222},
			expr: &actionExpr{
				pos: position{line: 736, col: 24, offset: 25245},
				run: (*parser).callonMathRoundExpression1,
				expr: &seqExpr{
					pos: position{line: 736, col: 24, offset: 25245},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 736, col: 24, offset: 25245},
							val:        "round",
							ignoreCase: true,
							want:       "\"ROUND\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 736, col: 33, offset: 25254},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 736, col: 36, offset: 25257},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 736, col: 40, offset: 25261},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 736, col: 43, offset: 25264},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 46, offset: 25267},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 736, col: 57, offset: 25278},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 736, col: 60, offset: 25281},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSignExpression",
			pos:  position{line: 737, col: 1, offset: 25365},
			expr: &actionExpr{
				pos: position{line: 737, col: 23, offset: 25387},
				run: (*parser).callonMathSignExpression1,
				expr: &seqExpr{
					pos: position{line: 737, col: 23, offset: 25387},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 737, col: 23, offset: 25387},
							val:        "sign",
							ignoreCase: true,
							want:       "\"SIGN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 31, offset: 25395},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 737, col: 34, offset: 25398},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 38, offset: 25402},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 41, offset: 25405},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 44, offset: 25408},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 55, offset: 25419},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 737, col: 58, offset: 25422},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSinExpression",
			pos:  position{line: 738, col: 1, offset: 25505},
			expr: &actionExpr{
				pos: position{line: 738, col: 22, offset: 25526},
				run: (*parser).callonMathSinExpression1,
				expr: &seqExpr{
					pos: position{line: 738, col: 22, offset: 25526},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 738, col: 22, offset: 25526},
							val:        "sin",
							ignoreCase: true,
							want:       "\"SIN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 29, offset: 25533},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 738, col: 32, offset: 25536},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 36, offset: 25540},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 738, col: 39, offset: 25543},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 42, offset: 25546},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 53, offset: 25557},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 738, col: 56, offset: 25560},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSqrtExpression",
			pos:  position{line: 739, col: 1, offset: 25642},
			expr: &actionExpr{
				pos: position{line: 739, col: 23, offset: 25664},
				run: (*parser).callonMathSqrtExpression1,
				expr: &seqExpr{
					pos: position{line: 739, col: 23, offset: 25664},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 739, col: 23, offset: 25664},
							val:        "sqrt",
							ignoreCase: true,
							want:       "\"SQRT\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 31, offset: 25672},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 739, col: 34, offset: 25675},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 38, offset: 25679},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 739, col: 41, offset: 25682},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 44, offset: 25685},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 55, offset: 25696},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 739, col: 58, offset: 25699},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathSquareExpression",
			pos:  position{line: 740, col: 1, offset: 25782},
			expr: &actionExpr{
				pos: position{line: 740, col: 25, offset: 25806},
				run: (*parser).callonMathSquareExpression1,
				expr: &seqExpr{
					pos: position{line: 740, col: 25, offset: 25806},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 740, col: 25, offset: 25806},
							val:        "square",
							ignoreCase: true,
							want:       "\"SQUARE\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 35, offset: 25816},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 740, col: 38, offset: 25819},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 42, offset: 25823},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 740, col: 45, offset: 25826},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 48, offset: 25829},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 59, offset: 25840},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 740, col: 62, offset: 25843},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathTanExpression",
			pos:  position{line: 741, col: 1, offset: 25928},
			expr: &actionExpr{
				pos: position{line: 741, col: 22, offset: 25949},
				run: (*parser).callonMathTanExpression1,
				expr: &seqExpr{
					pos: position{line: 741, col: 22, offset: 25949},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 741, col: 22, offset: 25949},
							val:        "tan",
							ignoreCase: true,
							want:       "\"TAN\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 29, offset: 25956},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 741, col: 32, offset: 25959},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 36, offset: 25963},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 741, col: 39, offset: 25966},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 42, offset: 25969},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 741, col: 53, offset: 25980},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 741, col: 56, offset: 25983},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathTruncExpression",
			pos:  position{line: 742, col: 1, offset: 26065},
			expr: &actionExpr{
				pos: position{line: 742, col: 24, offset: 26088},
				run: (*parser).callonMathTruncExpression1,
				expr: &seqExpr{
					pos: position{line: 742, col: 24, offset: 26088},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 742, col: 24, offset: 26088},
							val:        "trunc",
							ignoreCase: true,
							want:       "\"TRUNC\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 33, offset: 26097},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 742, col: 36, offset: 26100},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 40, offset: 26104},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 742, col: 43, offset: 26107},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 46, offset: 26110},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 57, offset: 26121},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 742, col: 60, offset: 26124},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathAtn2Expression",
			pos:  position{line: 744, col: 1, offset: 26209},
			expr: &actionExpr{
				pos: position{line: 744, col: 23, offset: 26231},
				run: (*parser).callonMathAtn2Expression1,
				expr: &seqExpr{
					pos: position{line: 744, col: 23, offset: 26231},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 744, col: 23, offset: 26231},
							val:        "atn2",
							ignoreCase: true,
							want:       "\"ATN2\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 31, offset: 26239},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 744, col: 34, offset: 26242},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 38, offset: 26246},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 41, offset: 26249},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 46, offset: 26254},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 57, offset: 26265},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 744, col: 60, offset: 26268},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 64, offset: 26272},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 67, offset: 26275},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 72, offset: 26280},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 83, offset: 26291},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 744, col: 86, offset: 26294},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntAddExpression",
			pos:  position{line: 745, col: 1, offset: 26385},
			expr: &actionExpr{
				pos: position{line: 745, col: 25, offset: 26409},
				run: (*parser).callonMathIntAddExpression1,
				expr: &seqExpr{
					pos: position{line: 745, col: 25, offset: 26409},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 745, col: 25, offset: 26409},
							val:        "intadd",
							ignoreCase: true,
							want:       "\"IntAdd\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 35, offset: 26419},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 745, col: 38, offset: 26422},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 42, offset: 26426},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 745, col: 45, offset: 26429},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 50, offset: 26434},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 61, offset: 26445},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 745, col: 64, offset: 26448},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 68, offset: 26452},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 745, col: 71, offset: 26455},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 76, offset: 26460},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 745, col: 87, offset: 26471},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 745, col: 90, offset: 26474},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitAndExpression",
			pos:  position{line: 746, col: 1, offset: 26567},
			expr: &actionExpr{
				pos: position{line: 746, col: 28, offset: 26594},
				run: (*parser).callonMathIntBitAndExpression1,
				expr: &seqExpr{
					pos: position{line: 746, col: 28, offset: 26594},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 746, col: 28, offset: 26594},
							val:        "intbitand",
							ignoreCase: true,
							want:       "\"IntBitAnd\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 41, offset: 26607},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 746, col: 44, offset: 26610},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 48, offset: 26614},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 51, offset: 26617},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 56, offset: 26622},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 67, offset: 26633},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 746, col: 70, offset: 26636},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 74, offset: 26640},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 77, offset: 26643},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 82, offset: 26648},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 93, offset: 26659},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 746, col: 96, offset: 26662},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitLeftShiftExpression",
			pos:  position{line: 747, col: 1, offset: 26758},
			expr: &actionExpr{
				pos: position{line: 747, col: 34, offset: 26791},
				run: (*parser).callonMathIntBitLeftShiftExpression1,
				expr: &seqExpr{
					pos: position{line: 747, col: 34, offset: 26791},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 747, col: 34, offset: 26791},
							val:        "intbitleftshift",
							ignoreCase: true,
							want:       "\"IntBitLeftShift\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 53, offset: 26810},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 747, col: 56, offset: 26813},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 60, offset: 26817},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 63, offset: 26820},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 68, offset: 26825},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 79, offset: 26836},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 747, col: 82, offset: 26839},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 86, offset: 26843},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 747, col: 89, offset: 26846},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 94, offset: 26851},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 105, offset: 26862},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 747, col: 108, offset: 26865},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitOrExpression",
			pos:  position{line: 748, col: 1, offset: 26967},
			expr: &actionExpr{
				pos: position{line: 748, col: 27, offset: 26993},
				run: (*parser).callonMathIntBitOrExpression1,
				expr: &seqExpr{
					pos: position{line: 748, col: 27, offset: 26993},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 748, col: 27, offset: 26993},
							val:        "intbitor",
							ignoreCase: true,
							want:       "\"IntBitOr\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 39, offset: 27005},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 748, col: 42, offset: 27008},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 46, offset: 27012},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 49, offset: 27015},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 54, offset: 27020},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 65, offset: 27031},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 748, col: 68, offset: 27034},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 72, offset: 27038},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 75, offset: 27041},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 80, offset: 27046},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 91, offset: 27057},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 748, col: 94, offset: 27060},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitRightShiftExpression",
			pos:  position{line: 749, col: 1, offset: 27155},
			expr: &actionExpr{
				pos: position{line: 749, col: 35, offset: 27189},
				run: (*parser).callonMathIntBitRightShiftExpression1,
				expr: &seqExpr{
					pos: position{line: 749, col: 35, offset: 27189},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 749, col: 35, offset: 27189},
							val:        "intbitrightshift",
							ignoreCase: true,
							want:       "\"IntBitRightShift\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 55, offset: 27209},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 749, col: 58, offset: 27212},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 62, offset: 27216},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 749, col: 65, offset: 27219},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 70, offset: 27224},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 81, offset: 27235},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 749, col: 84, offset: 27238},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 88, offset: 27242},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 749, col: 91, offset: 27245},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 96, offset: 27250},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 749, col: 107, offset: 27261},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 749, col: 110, offset: 27264},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntBitXorExpression",
			pos:  position{line: 750, col: 1, offset: 27367},
			expr: &actionExpr{
				pos: position{line: 750, col: 28, offset: 27394},
				run: (*parser).callonMathIntBitXorExpression1,
				expr: &seqExpr{
					pos: position{line: 750, col: 28, offset: 27394},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 750, col: 28, offset: 27394},
							val:        "intbitxor",
							ignoreCase: true,
							want:       "\"IntBitXor\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 41, offset: 27407},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 750, col: 44, offset: 27410},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 48, offset: 27414},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 750, col: 51, offset: 27417},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 56, offset: 27422},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 67, offset: 27433},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 750, col: 70, offset: 27436},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 74, offset: 27440},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 750, col: 77, offset: 27443},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 82, offset: 27448},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 93, offset: 27459},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 750, col: 96, offset: 27462},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntDivExpression",
			pos:  position{line: 751, col: 1, offset: 27558},
			expr: &actionExpr{
				pos: position{line: 751, col: 25, offset: 27582},
				run: (*parser).callonMathIntDivExpression1,
				expr: &seqExpr{
					pos: position{line: 751, col: 25, offset: 27582},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 751, col: 25, offset: 27582},
							val:        "intdiv",
							ignoreCase: true,
							want:       "\"IntDiv\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 35, offset: 27592},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 751, col: 38, offset: 27595},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 42, offset: 27599},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 45, offset: 27602},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 50, offset: 27607},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 61, offset: 27618},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 751, col: 64, offset: 27621},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 68, offset: 27625},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 71, offset: 27628},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 76, offset: 27633},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 87, offset: 27644},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 751, col: 90, offset: 27647},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntModExpression",
			pos:  position{line: 752, col: 1, offset: 27740},
			expr: &actionExpr{
				pos: position{line: 752, col: 25, offset: 27764},
				run: (*parser).callonMathIntModExpression1,
				expr: &seqExpr{
					pos: position{line: 752, col: 25, offset: 27764},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 752, col: 25, offset: 27764},
							val:        "intmod",
							ignoreCase: true,
							want:       "\"IntMod\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 35, offset: 27774},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 752, col: 38, offset: 27777},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 42, offset: 27781},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 45, offset: 27784},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 50, offset: 27789},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 61, offset: 27800},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 752, col: 64, offset: 27803},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 68, offset: 27807},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 71, offset: 27810},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 76, offset: 27815},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 87, offset: 27826},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 752, col: 90, offset: 27829},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntMulExpression",
			pos:  position{line: 753, col: 1, offset: 27922},
			expr: &actionExpr{
				pos: position{line: 753, col: 25, offset: 27946},
				run: (*parser).callonMathIntMulExpression1,
				expr: &seqExpr{
					pos: position{line: 753, col: 25, offset: 27946},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 753, col: 25, offset: 27946},
							val:        "intmul",
							ignoreCase: true,
							want:       "\"IntMul\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 35, offset: 27956},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 753, col: 38, offset: 27959},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 42, offset: 27963},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 45, offset: 27966},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 50, offset: 27971},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 61, offset: 27982},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 753, col: 64, offset: 27985},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 68, offset: 27989},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 71, offset: 27992},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 76, offset: 27997},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 87, offset: 28008},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 753, col: 90, offset: 28011},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathIntSubExpression",
			pos:  position{line: 754, col: 1, offset: 28104},
			expr: &actionExpr{
				pos: position{line: 754, col: 25, offset: 28128},
				run: (*parser).callonMathIntSubExpression1,
				expr: &seqExpr{
					pos: position{line: 754, col: 25, offset: 28128},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 754, col: 25, offset: 28128},
							val:        "intsub",
							ignoreCase: true,
							want:       "\"IntSub\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 35, offset: 28138},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 754, col: 38, offset: 28141},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 42, offset: 28145},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 754, col: 45, offset: 28148},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 50, offset: 28153},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 61, offset: 28164},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 754, col: 64, offset: 28167},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 68, offset: 28171},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 754, col: 71, offset: 28174},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 76, offset: 28179},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 87, offset: 28190},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 754, col: 90, offset: 28193},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathPowerExpression",
			pos:  position{line: 755, col: 1, offset: 28286},
			expr: &actionExpr{
				pos: position{line: 755, col: 24, offset: 28309},
				run: (*parser).callonMathPowerExpression1,
				expr: &seqExpr{
					pos: position{line: 755, col: 24, offset: 28309},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 755, col: 24, offset: 28309},
							val:        "power",
							ignoreCase: true,
							want:       "\"POWER\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 33, offset: 28318},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 755, col: 36, offset: 28321},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 40, offset: 28325},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 43, offset: 28328},
							label: "set1",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 48, offset: 28333},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 59, offset: 28344},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 755, col: 62, offset: 28347},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 66, offset: 28351},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 69, offset: 28354},
							label: "set2",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 74, offset: 28359},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 85, offset: 28370},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 755, col: 88, offset: 28373},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathLogExpression",
			pos:  position{line: 757, col: 1, offset: 28466},
			expr: &actionExpr{
				pos: position{line: 757, col: 22, offset: 28487},
				run: (*parser).callonMathLogExpression1,
				expr: &seqExpr{
					pos: position{line: 757, col: 22, offset: 28487},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 757, col: 22, offset: 28487},
							val:        "log",
							ignoreCase: true,
							want:       "\"LOG\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 29, offset: 28494},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 757, col: 32, offset: 28497},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 36, offset: 28501},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 757, col: 39, offset: 28504},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 43, offset: 28508},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 54, offset: 28519},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 757, col: 61, offset: 28526},
								expr: &actionExpr{
									pos: position{line: 757, col: 62, offset: 28527},
									run: (*parser).callonMathLogExpression11,
									expr: &seqExpr{
										pos: position{line: 757, col: 62, offset: 28527},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 757, col: 62, offset: 28527},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 757, col: 65, offset: 28530},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 757, col: 69, offset: 28534},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 757, col: 72, offset: 28537},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 757, col: 75, offset: 28540},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 107, offset: 28572},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 757, col: 110, offset: 28575},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathNumberBinExpression",
			pos:  position{line: 760, col: 1, offset: 28697},
			expr: &actionExpr{
				pos: position{line: 760, col: 28, offset: 28724},
				run: (*parser).callonMathNumberBinExpression1,
				expr: &seqExpr{
					pos: position{line: 760, col: 28, offset: 28724},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 760, col: 28, offset: 28724},
							val:        "numberbin",
							ignoreCase: true,
							want:       "\"NumberBin\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 760, col: 41, offset: 28737},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 760, col: 44, offset: 28740},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 760, col: 48, offset: 28744},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 760, col: 51, offset: 28747},
							label: "ex1",
							expr: &ruleRefExpr{
								pos:  position{line: 760, col: 55, offset: 28751},
								name: "SelectItem",
							},
						},
						&labeledExpr{
							pos:   position{line: 760, col: 66, offset: 28762},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 760, col: 73, offset: 28769},
								expr: &actionExpr{
									pos: position{line: 760, col: 74, offset: 28770},
									run: (*parser).callonMathNumberBinExpression11,
									expr: &seqExpr{
										pos: position{line: 760, col: 74, offset: 28770},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 760, col: 74, offset: 28770},
												name: "ws",
											},
											&litMatcher{
												pos:        position{line: 760, col: 77, offset: 28773},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 760, col: 81, offset: 28777},
												name: "ws",
											},
											&labeledExpr{
												pos:   position{line: 760, col: 84, offset: 28780},
												label: "ex",
												expr: &ruleRefExpr{
													pos:  position{line: 760, col: 87, offset: 28783},
													name: "SelectItem",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 760, col: 119, offset: 28815},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 760, col: 122, offset: 28818},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathPiExpression",
			pos:  position{line: 763, col: 1, offset: 28946},
			expr: &actionExpr{
				pos: position{line: 763, col: 21, offset: 28966},
				run: (*parser).callonMathPiExpression1,
				expr: &seqExpr{
					pos: position{line: 763, col: 21, offset: 28966},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 763, col: 21, offset: 28966},
							val:        "pi",
							ignoreCase: true,
							want:       "\"PI\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 27, offset: 28972},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 763, col: 30, offset: 28975},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 763, col: 34, offset: 28979},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 763, col: 37, offset: 28982},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MathRandExpression",
			pos:  position{line: 764, col: 1, offset: 29061},
			expr: &actionExpr{
				pos: position{line: 764, col: 23, offset: 29083},
				run: (*parser).callonMathRandExpression1,
				expr: &seqExpr{
					pos: position{line: 764, col: 23, offset: 29083},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 764, col: 23, offset: 29083},
							val:        "rand",
							ignoreCase: true,
							want:       "\"RAND\"i",
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 31, offset: 29091},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 764, col: 34, offset: 29094},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 38, offset: 29098},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 764, col: 41, offset: 29101},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "InFunction",
			pos:  position{line: 766, col: 1, offset: 29183},
			expr: &choiceExpr{
				pos: position{line: 766, col: 15, offset: 29197},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 766, col: 15, offset: 29197},
						run: (*parser).callonInFunction2,
						expr: &seqExpr{
							pos: position{line: 766, col: 15, offset: 29197},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 766, col: 15, offset: 29197},
									label: "ex1",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 19, offset: 29201},
										name: "SelectProperty",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 34, offset: 29216},
									name: "ws",
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 37, offset: 29219},
									name: "In",
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 40, offset: 29222},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 766, col: 43, offset: 29225},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 47, offset: 29229},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 50, offset: 29232},
									label: "ex2",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 54, offset: 29236},
										name: "SelectItem",
									},
								},
								&labeledExpr{
									pos:   position{line: 766, col: 65, offset: 29247},
									label: "others",
									expr: &zeroOrMoreExpr{
										pos: position{line: 766, col: 72, offset: 29254},
										expr: &actionExpr{
											pos: position{line: 766, col: 73, offset: 29255},
											run: (*parser).callonInFunction15,
											expr: &seqExpr{
												pos: position{line: 766, col: 73, offset: 29255},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 766, col: 73, offset: 29255},
														name: "ws",
													},
													&litMatcher{
														pos:        position{line: 766, col: 76, offset: 29258},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&ruleRefExpr{
														pos:  position{line: 766, col: 80, offset: 29262},
														name: "ws",
													},
													&labeledExpr{
														pos:   position{line: 766, col: 83, offset: 29265},
														label: "ex",
														expr: &ruleRefExpr{
															pos:  position{line: 766, col: 86, offset: 29268},
															name: "SelectItem",
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 118, offset: 29300},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 766, col: 121, offset: 29303},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 29427},
						run: (*parser).callonInFunction24,
						expr: &seqExpr{
							pos: position{line: 768, col: 5, offset: 29427},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 768, col: 5, offset: 29427},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 9, offset: 29431},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 768, col: 12, offset: 29434},
									label: "ex1",
									expr: &ruleRefExpr{
										pos:  position{line: 768, col: 16, offset: 29438},
										name: "SelectItem",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 27, offset: 29449},
									name: "ws",
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 30, offset: 29452},
									name: "In",
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 33, offset: 29455},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 768, col: 36, offset: 29458},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 40, offset: 29462},
									name: "ws",
								},
								&labeledExpr{
									pos:   position{line: 768, col: 43, offset: 29465},
									label: "ex2",
									expr: &ruleRefExpr{
										pos:  position{line: 768, col: 47, offset: 29469},
										name: "SelectItem",
									},
								},
								&labeledExpr{
									pos:   position{line: 768, col: 58, offset: 29480},
									label: "others",
									expr: &zeroOrMoreExpr{
										pos: position{line: 768, col: 65, offset: 29487},
										expr: &actionExpr{
											pos: position{line: 768, col: 66, offset: 29488},
											run: (*parser).callonInFunction39,
											expr: &seqExpr{
												pos: position{line: 768, col: 66, offset: 29488},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 768, col: 66, offset: 29488},
														name: "ws",
													},
													&litMatcher{
														pos:        position{line: 768, col: 69, offset: 29491},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&ruleRefExpr{
														pos:  position{line: 768, col: 73, offset: 29495},
														name: "ws",
													},
													&labeledExpr{
														pos:   position{line: 768, col: 76, offset: 29498},
														label: "ex",
														expr: &ruleRefExpr{
															pos:  position{line: 768, col: 79, offset: 29501},
															name: "SelectItem",
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 111, offset: 29533},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 768, col: 114, offset: 29536},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 118, offset: 29540},
									name: "ws",
								},
								&litMatcher{
									pos:        position{line: 768, col: 121, offset: 29543},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AvgAggregateExpression",
			pos:  position{line: 772, col: 1, offset: 29666},
			expr: &actionExpr{
				pos: position{line: 772, col: 29, offset: 29694},
				run: (*parser).callonAvgAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 772, col: 29, offset: 29694},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 772, col: 29, offset: 29694},
							val:        "avg",
							ignoreCase: true,
							want:       "\"AVG\"i",
						},
						&litMatcher{
							pos:        position{line: 772, col: 36, offset: 29701},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 40, offset: 29705},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 43, offset: 29708},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 46, offset: 29711},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 58, offset: 29723},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 772, col: 61, offset: 29726},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "CountAggregateExpression",
			pos:  position{line: 776, col: 1, offset: 29818},
			expr: &actionExpr{
				pos: position{line: 776, col: 29, offset: 29846},
				run: (*parser).callonCountAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 776, col: 29, offset: 29846},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 776, col: 29, offset: 29846},
							val:        "count",
							ignoreCase: true,
							want:       "\"COUNT\"i",
						},
						&litMatcher{
							pos:        position{line: 776, col: 38, offset: 29855},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 42, offset: 29859},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 45, offset: 29862},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 48, offset: 29865},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 59, offset: 29876},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 776, col: 62, offset: 29879},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MaxAggregateExpression",
			pos:  position{line: 780, col: 1, offset: 29973},
			expr: &actionExpr{
				pos: position{line: 780, col: 29, offset: 30001},
				run: (*parser).callonMaxAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 780, col: 29, offset: 30001},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 780, col: 29, offset: 30001},
							val:        "max",
							ignoreCase: true,
							want:       "\"MAX\"i",
						},
						&litMatcher{
							pos:        position{line: 780, col: 36, offset: 30008},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 40, offset: 30012},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 43, offset: 30015},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 46, offset: 30018},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 57, offset: 30029},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 780, col: 60, offset: 30032},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "MinAggregateExpression",
			pos:  position{line: 784, col: 1, offset: 30124},
			expr: &actionExpr{
				pos: position{line: 784, col: 29, offset: 30152},
				run: (*parser).callonMinAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 784, col: 29, offset: 30152},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 784, col: 29, offset: 30152},
							val:        "min",
							ignoreCase: true,
							want:       "\"MIN\"i",
						},
						&litMatcher{
							pos:        position{line: 784, col: 36, offset: 30159},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 784, col: 40, offset: 30163},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 784, col: 43, offset: 30166},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 46, offset: 30169},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 784, col: 57, offset: 30180},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 784, col: 60, offset: 30183},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "SumAggregateExpression",
			pos:  position{line: 788, col: 1, offset: 30275},
			expr: &actionExpr{
				pos: position{line: 788, col: 29, offset: 30303},
				run: (*parser).callonSumAggregateExpression1,
				expr: &seqExpr{
					pos: position{line: 788, col: 29, offset: 30303},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 788, col: 29, offset: 30303},
							val:        "sum",
							ignoreCase: true,
							want:       "\"SUM\"i",
						},
						&litMatcher{
							pos:        position{line: 788, col: 36, offset: 30310},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 40, offset: 30314},
							name: "ws",
						},
						&labeledExpr{
							pos:   position{line: 788, col: 43, offset: 30317},
							label: "ex",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 46, offset: 30320},
								name: "SelectItem",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 57, offset: 30331},
							name: "ws",
						},
						&litMatcher{
							pos:        position{line: 788, col: 60, offset: 30334},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Integer",
			pos:  position{line: 792, col: 1, offset: 30426},
			expr: &actionExpr{
				pos: position{line: 792, col: 12, offset: 30437},
				run: (*parser).callonInteger1,
				expr: &oneOrMoreExpr{
					pos: position{line: 792, col: 12, offset: 30437},
					expr: &charClassMatcher{
						pos:        position{line: 792, col: 12, offset: 30437},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "StringCharacter",
			pos:  position{line: 796, col: 1, offset: 30489},
			expr: &choiceExpr{
				pos: position{line: 796, col: 20, offset: 30508},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 796, col: 20, offset: 30508},
						run: (*parser).callonStringCharacter2,
						expr: &seqExpr{
							pos: position{line: 796, col: 20, offset: 30508},
							exprs: []any{
								&notExpr{
									pos: position{line: 796, col: 20, offset: 30508},
									expr: &choiceExpr{
										pos: position{line: 796, col: 22, offset: 30510},
										alternatives: []any{
											&litMatcher{
												pos:        position{line: 796, col: 22, offset: 30510},
												val:        "\"",
												ignoreCase: false,
												want:       "\"\\\"\"",
											},
											&litMatcher{
												pos:        position{line: 796, col: 28, offset: 30516},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&anyMatcher{
									line: 796, col: 34, offset: 30522,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 30559},
						run: (*parser).callonStringCharacter9,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 30559},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 797, col: 5, offset: 30559},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 797, col: 10, offset: 30564},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 14, offset: 30568},
										name: "EscapeSequenceCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequenceCharacter",
			pos:  position{line: 799, col: 1, offset: 30613},
			expr: &labeledExpr{
				pos:   position{line: 799, col: 28, offset: 30640},
				label: "char",
				expr: &ruleRefExpr{
					pos:  position{line: 799, col: 33, offset: 30645},
					name: "EscapeCharacter",
				},
			},
		},
		{
			name: "EscapeCharacter",
			pos:  position{line: 801, col: 1, offset: 30662},
			expr: &choiceExpr{
				pos: position{line: 801, col: 20, offset: 30681},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 801, col: 20, offset: 30681},
						val:        "'",
						ignoreCase: false,
						want:       "\"'\"",
					},
					&litMatcher{
						pos:        position{line: 802, col: 5, offset: 30689},
						val:        "\"",
						ignoreCase: false,
						want:       "\"\\\"\"",
					},
					&litMatcher{
						pos:        position{line: 803, col: 5, offset: 30697},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 30706},
						run: (*parser).callonEscapeCharacter5,
						expr: &litMatcher{
							pos:        position{line: 804, col: 5, offset: 30706},
							val:        "b",
							ignoreCase: false,
							want:       "\"b\"",
						},
					},
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 30735},
						run: (*parser).callonEscapeCharacter7,
						expr: &litMatcher{
							pos:        position{line: 805, col: 5, offset: 30735},
							val:        "f",
							ignoreCase: false,
							want:       "\"f\"",
						},
					},
					&actionExpr{
						pos: position{line: 806, col: 5, offset: 30764},
						run: (*parser).callonEscapeCharacter9,
						expr: &litMatcher{
							pos:        position{line: 806, col: 5, offset: 30764},
							val:        "n",
							ignoreCase: false,
							want:       "\"n\"",
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 30793},
						run: (*parser).callonEscapeCharacter11,
						expr: &litMatcher{
							pos:        position{line: 807, col: 5, offset: 30793},
							val:        "r",
							ignoreCase: false,
							want:       "\"r\"",
						},
					},
					&actionExpr{
						pos: position{line: 808, col: 5, offset: 30822},
						run: (*parser).callonEscapeCharacter13,
						expr: &litMatcher{
							pos:        position{line: 808, col: 5, offset: 30822},
							val:        "t",
							ignoreCase: false,
							want:       "\"t\"",
						},
					},
				},
			},
		},
		{
			name: "non_escape_character",
			pos:  position{line: 810, col: 1, offset: 30848},
			expr: &actionExpr{
				pos: position{line: 810, col: 25, offset: 30872},
				run: (*parser).callonnon_escape_character1,
				expr: &seqExpr{
					pos: position{line: 810, col: 25, offset: 30872},
					exprs: []any{
						&notExpr{
							pos: position{line: 810, col: 25, offset: 30872},
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 27, offset: 30874},
								name: "escape_character",
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 45, offset: 30892},
							label: "char",
							expr: &anyMatcher{
								line: 810, col: 50, offset: 30897,
							},
						},
					},
				},
			},
		},
		{
			name: "ws",
			pos:  position{line: 813, col: 1, offset: 30936},
			expr: &zeroOrMoreExpr{
				pos: position{line: 813, col: 7, offset: 30942},
				expr: &charClassMatcher{
					pos:        position{line: 813, col: 7, offset: 30942},
					val:        "[ \\t\\n\\r]",
					chars:      []rune{' ', '\t', '\n', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "wss",
			pos:  position{line: 815, col: 1, offset: 30954},
			expr: &oneOrMoreExpr{
				pos: position{line: 815, col: 8, offset: 30961},
				expr: &charClassMatcher{
					pos:        position{line: 815, col: 8, offset: 30961},
					val:        "[ \\t\\n\\r]",
					chars:      []rune{' ', '\t', '\n', '\r'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 817, col: 1, offset: 30973},
			expr: &notExpr{
				pos: position{line: 817, col: 8, offset: 30980},
				expr: &anyMatcher{
					line: 817, col: 9, offset: 30981,
				},
			},
		},
	},
}

func (c *current) onInput1(selectStmt any) (any, error) {
	return selectStmt, nil
}

func (p *parser) callonInput1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInput1(stack["selectStmt"])
}

func (c *current) onSelectStmt22(join any) (any, error) {
	return join, nil
}

func (p *parser) callonSelectStmt22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt22(stack["join"])
}

func (c *current) onSelectStmt30(condition any) (any, error) {
	return condition, nil
}

func (p *parser) callonSelectStmt30() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt30(stack["condition"])
}

func (c *current) onSelectStmt39(columns any) (any, error) {
	return columns, nil
}

func (p *parser) callonSelectStmt39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt39(stack["columns"])
}

func (c *current) onSelectStmt48(order any) (any, error) {
	return order, nil
}

func (p *parser) callonSelectStmt48() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt48(stack["order"])
}

func (c *current) onSelectStmt55(offset any) (any, error) {
	return offset, nil
}

func (p *parser) callonSelectStmt55() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt55(stack["offset"])
}

func (c *current) onSelectStmt1(distinctClause, topClause, columns, fromClause, joinClauses, whereClause, groupByClause, orderByClause, offsetClause any) (any, error) {
	return makeSelectStmt(columns, fromClause, joinClauses, whereClause,
		distinctClause, topClause, groupByClause, orderByClause, offsetClause)
}

func (p *parser) callonSelectStmt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt1(stack["distinctClause"], stack["topClause"], stack["columns"], stack["fromClause"], stack["joinClauses"], stack["whereClause"], stack["groupByClause"], stack["orderByClause"], stack["offsetClause"])
}

func (c *current) onTopClause1(count any) (any, error) {
	return count, nil
}

func (p *parser) callonTopClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopClause1(stack["count"])
}

func (c *current) onFromClause9(column any) (any, error) {
	return column, nil
}

func (p *parser) callonFromClause9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromClause9(stack["column"])
}

func (c *current) onFromClause2(table, selectItem any) (any, error) {
	tableTyped := table.(parsers.Table)

	if selectItem != nil {
		tableTyped.SelectItem = selectItem.(parsers.SelectItem)
		tableTyped.IsInSelect = true
	}

	return tableTyped, nil
}

func (p *parser) callonFromClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromClause2(stack["table"], stack["selectItem"])
}

func (c *current) onFromClause16(column any) (any, error) {
	tableSelectItem := column.(parsers.SelectItem)
	table := parsers.Table{
		Value:      tableSelectItem.Alias,
		SelectItem: tableSelectItem,
	}
	return table, nil
}

func (p *parser) callonFromClause16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromClause16(stack["column"])
}

func (c *current) onFromClause22(subQuery any) (any, error) {
	subQueryTyped := subQuery.(parsers.SelectItem)
	table := parsers.Table{
		Value:      subQueryTyped.Alias,
		SelectItem: subQueryTyped,
	}
	return table, nil
}

func (p *parser) callonFromClause22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromClause22(stack["subQuery"])
}

func (c *current) onSubQuery5(exists any) (any, error) {
	return exists, nil
}

func (p *parser) callonSubQuery5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubQuery5(stack["exists"])
}

func (c *current) onSubQuery1(exists, selectStmt any) (any, error) {
	if selectStatement, isGoodValue := selectStmt.(parsers.SelectStmt); isGoodValue {
		selectStatement.Exists = exists != nil
		return selectStatement, nil
	}

	return selectStmt, nil
}

func (p *parser) callonSubQuery1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubQuery1(stack["exists"], stack["selectStmt"])
}

func (c *current) onSubQuerySelectItem7(alias any) (any, error) {
	return alias, nil
}

func (p *parser) callonSubQuerySelectItem7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubQuerySelectItem7(stack["alias"])
}

func (c *current) onSubQuerySelectItem1(subQuery, asClause any) (any, error) {
	selectItem := parsers.SelectItem{
		Type:  parsers.SelectItemTypeSubQuery,
		Value: subQuery,
	}

	if tableName, isString := asClause.(string); isString {
		selectItem.Alias = tableName
	}

	return selectItem, nil
}

func (p *parser) callonSubQuerySelectItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubQuerySelectItem1(stack["subQuery"], stack["asClause"])
}

func (c *current) onJoinClause2(table, column any) (any, error) {
	return makeJoin(table, column)
}

func (p *parser) callonJoinClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinClause2(stack["table"], stack["column"])
}

func (c *current) onJoinClause13(subQuery any) (any, error) {
	return makeJoin(nil, subQuery)
}

func (p *parser) callonJoinClause13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinClause13(stack["subQuery"])
}

func (c *current) onOffsetClause1(offset, limit any) (any, error) {
	return []interface{}{offset.(parsers.Constant).Value, limit.(parsers.Constant).Value}, nil
}

func (p *parser) callonOffsetClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetClause1(stack["offset"], stack["limit"])
}

func (c *current) onSelectAsterisk1() (any, error) {
	selectItem, _ := makeSelectItem("c", make([]interface{}, 0), parsers.SelectItemTypeField)
	selectItem.IsTopLevel = true
	return makeColumnList(selectItem, make([]interface{}, 0))
}

func (p *parser) callonSelectAsterisk1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectAsterisk1()
}

func (c *current) onColumnList7(coll any) (any, error) {
	return coll, nil
}

func (p *parser) callonColumnList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnList7(stack["coll"])
}

func (c *current) onColumnList1(column, other_columns any) (any, error) {
	return makeColumnList(column, other_columns)
}

func (p *parser) callonColumnList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnList1(stack["column"], stack["other_columns"])
}

func (c *current) onExpressionOrSelectItem2(expression, asClause any) (any, error) {
	switch typedValue := expression.(type) {
	case parsers.ComparisonExpression, parsers.LogicalExpression:
		selectItem := parsers.SelectItem{
			Type:  parsers.SelectItemTypeExpression,
			Value: typedValue,
		}

		if aliasValue, ok := asClause.(string); ok {
			selectItem.Alias = aliasValue
		}

		return selectItem, nil
	case parsers.SelectItem:
		if aliasValue, ok := asClause.(string); ok {
			typedValue.Alias = aliasValue
		}
		return typedValue, nil
	default:
		return typedValue, nil
	}
}

func (p *parser) callonExpressionOrSelectItem2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionOrSelectItem2(stack["expression"], stack["asClause"])
}

func (c *current) onExpressionOrSelectItem9(item any) (any, error) {
	return item, nil
}

func (p *parser) callonExpressionOrSelectItem9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpressionOrSelectItem9(stack["item"])
}

func (c *current) onSelectValueSpec1(column any) (any, error) {
	selectItem := column.(parsers.SelectItem)
	selectItem.IsTopLevel = true
	return makeColumnList(selectItem, make([]interface{}, 0))
}

func (p *parser) callonSelectValueSpec1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectValueSpec1(stack["column"])
}

func (c *current) onTableName1(key any) (any, error) {
	return parsers.Table{Value: key.(string)}, nil
}

func (p *parser) callonTableName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableName1(stack["key"])
}

func (c *current) onSelectArray1(columns any) (any, error) {
	return makeSelectArray(columns)
}

func (p *parser) callonSelectArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectArray1(stack["columns"])
}

func (c *current) onSelectObject11(coll any) (any, error) {
	return coll, nil
}

func (p *parser) callonSelectObject11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject11(stack["coll"])
}

func (c *current) onSelectObject2(field, other_fields any) (any, error) {
	return makeSelectObject(field, other_fields)
}

func (p *parser) callonSelectObject2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject2(stack["field"], stack["other_fields"])
}

func (c *current) onSelectObject20() (any, error) {
	return parsers.SelectItem{
		SelectItems: []parsers.SelectItem{},
		Type:        parsers.SelectItemTypeObject,
	}, nil
}

func (p *parser) callonSelectObject20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObject20()
}

func (c *current) onSelectObjectField6(key any) (any, error) {
	return key, nil
}

func (p *parser) callonSelectObjectField6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObjectField6(stack["key"])
}

func (c *current) onSelectObjectField1(name, selectItem any) (any, error) {
	item := selectItem.(parsers.SelectItem)
	item.Alias = name.(string)
	return item, nil
}

func (p *parser) callonSelectObjectField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectObjectField1(stack["name"], stack["selectItem"])
}

func (c *current) onSelectProperty1(name, path any) (any, error) {
	return makeSelectItem(name, path, parsers.SelectItemTypeField)
}

func (p *parser) callonSelectProperty1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectProperty1(stack["name"], stack["path"])
}

func (c *current) onSelectItemWithAlias1(selectItem, asClause any) (any, error) {
	item := selectItem.(parsers.SelectItem)
	if aliasValue, ok := asClause.(string); ok {
		item.Alias = aliasValue
	}
	return item, nil
}

func (p *parser) callonSelectItemWithAlias1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectItemWithAlias1(stack["selectItem"], stack["asClause"])
}

func (c *current) onSelectItem1(selectItem any) (any, error) {
	var itemResult parsers.SelectItem
	switch typedValue := selectItem.(type) {
	case parsers.SelectItem:
		itemResult = typedValue
	case parsers.Constant:
		itemResult = parsers.SelectItem{
			Type:  parsers.SelectItemTypeConstant,
			Value: typedValue,
		}
	case parsers.FunctionCall:
		itemResult = parsers.SelectItem{
			Type:  parsers.SelectItemTypeFunctionCall,
			Value: typedValue,
		}
	}

	return itemResult, nil
}

func (p *parser) callonSelectItem1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectItem1(stack["selectItem"])
}

func (c *current) onAsClause1(alias any) (any, error) {
	return alias, nil
}

func (p *parser) callonAsClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsClause1(stack["alias"])
}

func (c *current) onDotFieldAccess1(id any) (any, error) {
	return id, nil
}

func (p *parser) callonDotFieldAccess1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotFieldAccess1(stack["id"])
}

func (c *current) onArrayFieldAccess2(id any) (any, error) {
	return id, nil
}

func (p *parser) callonArrayFieldAccess2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayFieldAccess2(stack["id"])
}

func (c *current) onArrayFieldAccess8(id any) (any, error) {
	return strconv.Itoa(id.(int)), nil
}

func (p *parser) callonArrayFieldAccess8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayFieldAccess8(stack["id"])
}

func (c *current) onArrayFieldAccess14(id any) (any, error) {
	return id.(parsers.Constant).Value.(string), nil
}

func (p *parser) callonArrayFieldAccess14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayFieldAccess14(stack["id"])
}

func (c *current) onIdentifier1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onCondition1(expression any) (any, error) {
	return expression, nil
}

func (p *parser) callonCondition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCondition1(stack["expression"])
}

func (c *current) onOrExpression7(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonOrExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression7(stack["ex"])
}

func (c *current) onOrExpression1(ex1, ex2 any) (any, error) {
	return combineExpressions(ex1, ex2, parsers.LogicalExpressionTypeOr)
}

func (p *parser) callonOrExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onAndExpression7(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonAndExpression7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression7(stack["ex"])
}

func (c *current) onAndExpression1(ex1, ex2 any) (any, error) {
	return combineExpressions(ex1, ex2, parsers.LogicalExpressionTypeAnd)
}

func (p *parser) callonAndExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onComparisonExpression2(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression2(stack["ex"])
}

func (c *current) onComparisonExpression10(left, op, right any) (any, error) {
	return parsers.ComparisonExpression{Left: left, Right: right, Operation: op.(string)}, nil
}

func (p *parser) callonComparisonExpression10() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression10(stack["left"], stack["op"], stack["right"])
}

func (c *current) onComparisonExpression20(inv, ex any) (any, error) {
	if inv != nil {
		ex1 := ex.(parsers.SelectItem)
		ex1.Invert = true
		return ex1, nil
	}
	return ex, nil
}

func (p *parser) callonComparisonExpression20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression20(stack["inv"], stack["ex"])
}

func (c *current) onComparisonExpression29(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonComparisonExpression29() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpression29(stack["ex"])
}

func (c *current) onOrderByClause9(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonOrderByClause9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause9(stack["ex"])
}

func (c *current) onOrderByClause1(ex1, others any) (any, error) {
	return makeOrderByClause(ex1, others)
}

func (p *parser) callonOrderByClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause1(stack["ex1"], stack["others"])
}

func (c *current) onOrderExpression1(field, order any) (any, error) {
	return makeOrderExpression(field, order)
}

func (p *parser) callonOrderExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderExpression1(stack["field"], stack["order"])
}

func (c *current) onOrderDirection1() (any, error) {
	if strings.EqualFold(string(c.text), "DESC") {
		return parsers.OrderDirectionDesc, nil
	}

	return parsers.OrderDirectionAsc, nil
}

func (p *parser) callonOrderDirection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderDirection1()
}

func (c *current) onComparisonOperator1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonOperator1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonOperator1()
}

func (c *current) onParameterConstant1() (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeParameterConstant, Value: string(c.text)}, nil
}

func (p *parser) callonParameterConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParameterConstant1()
}

func (c *current) onNullConstant1() (any, error) {
	return parsers.Constant{Value: nil}, nil
}

func (p *parser) callonNullConstant1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullConstant1()
}

func (c *current) onIntegerLiteral1(number any) (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeInteger, Value: number.(int)}, nil
}

func (p *parser) callonIntegerLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["number"])
}

func (c *current) onStringLiteral1(chars any) (any, error) {
	return parsers.Constant{Type: parsers.ConstantTypeString, Value: joinStrings(chars.([]interface{}))}, nil
}

func (p *parser) callonStringLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["chars"])
}

func (c *current) onFloatLiteral1() (any, error) {
	floatValue, _ := strconv.ParseFloat(string(c.text), 64)
	return parsers.Constant{Type: parsers.ConstantTypeFloat, Value: floatValue}, nil
}

func (p *parser) callonFloatLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1()
}

func (c *current) onBooleanLiteral1() (any, error) {
	boolValue, _ := strconv.ParseBool(string(c.text))
	return parsers.Constant{Type: parsers.ConstantTypeBoolean, Value: boolValue}, nil
}

func (p *parser) callonBooleanLiteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral1()
}

func (c *current) onUpperExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallUpper, []interface{}{ex})
}

func (p *parser) callonUpperExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperExpression1(stack["ex"])
}

func (c *current) onLowerExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLower, []interface{}{ex})
}

func (p *parser) callonLowerExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLowerExpression1(stack["ex"])
}

func (c *current) onStringEqualsExpression17(boolean any) (any, error) {
	return boolean, nil
}

func (p *parser) callonStringEqualsExpression17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringEqualsExpression17(stack["boolean"])
}

func (c *current) onStringEqualsExpression1(ex1, ex2, ignoreCase any) (any, error) {
	return createFunctionCall(parsers.FunctionCallStringEquals, []interface{}{ex1, ex2, ignoreCase})
}

func (p *parser) callonStringEqualsExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringEqualsExpression1(stack["ex1"], stack["ex2"], stack["ignoreCase"])
}

func (c *current) onToStringExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallToString, []interface{}{ex})
}

func (p *parser) callonToStringExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onToStringExpression1(stack["ex"])
}

func (c *current) onConcatExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonConcatExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpression11(stack["ex"])
}

func (c *current) onConcatExpression1(ex1, others any) (any, error) {
	arguments := append([]interface{}{ex1}, others.([]interface{})...)
	return createFunctionCall(parsers.FunctionCallConcat, arguments)
}

func (p *parser) callonConcatExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatExpression1(stack["ex1"], stack["others"])
}

func (c *current) onLeftExpression1(ex, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLeft, []interface{}{ex, length})
}

func (p *parser) callonLeftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeftExpression1(stack["ex"], stack["length"])
}

func (c *current) onLengthExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLength, []interface{}{ex})
}

func (p *parser) callonLengthExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLengthExpression1(stack["ex"])
}

func (c *current) onLTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallLTrim, []interface{}{ex})
}

func (p *parser) callonLTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLTrimExpression1(stack["ex"])
}

func (c *current) onReplaceExpression1(ex1, ex2, ex3 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReplace, []interface{}{ex1, ex2, ex3})
}

func (p *parser) callonReplaceExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplaceExpression1(stack["ex1"], stack["ex2"], stack["ex3"])
}

func (c *current) onReplicateExpression1(ex1, ex2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReplicate, []interface{}{ex1, ex2})
}

func (p *parser) callonReplicateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReplicateExpression1(stack["ex1"], stack["ex2"])
}

func (c *current) onReverseExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallReverse, []interface{}{ex})
}

func (p *parser) callonReverseExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReverseExpression1(stack["ex"])
}

func (c *current) onRightExpression1(ex, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallRight, []interface{}{ex, length})
}

func (p *parser) callonRightExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRightExpression1(stack["ex"], stack["length"])
}

func (c *current) onRTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallRTrim, []interface{}{ex})
}

func (p *parser) callonRTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRTrimExpression1(stack["ex"])
}

func (c *current) onSubstringExpression1(ex, startPos, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSubstring, []interface{}{ex, startPos, length})
}

func (p *parser) callonSubstringExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstringExpression1(stack["ex"], stack["startPos"], stack["length"])
}

func (c *current) onTrimExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallTrim, []interface{}{ex})
}

func (p *parser) callonTrimExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrimExpression1(stack["ex"])
}

func (c *current) onThreeArgumentStringFunctionExpression18(boolean any) (any, error) {
	return boolean, nil
}

func (p *parser) callonThreeArgumentStringFunctionExpression18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunctionExpression18(stack["boolean"])
}

func (c *current) onThreeArgumentStringFunctionExpression1(function, ex1, ex2, ignoreCase any) (any, error) {
	var functionType parsers.FunctionCallType

	lowerFunction := strings.ToUpper(function.(string))
	switch lowerFunction {
	case "CONTAINS":
		functionType = parsers.FunctionCallContains
	case "ENDSWITH":
		functionType = parsers.FunctionCallEndsWith
	case "STARTSWITH":
		functionType = parsers.FunctionCallStartsWith
	case "INDEX_OF":
		functionType = parsers.FunctionCallIndexOf
	}

	return createFunctionCall(functionType, []interface{}{ex1, ex2, ignoreCase})
}

func (p *parser) callonThreeArgumentStringFunctionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunctionExpression1(stack["function"], stack["ex1"], stack["ex2"], stack["ignoreCase"])
}

func (c *current) onThreeArgumentStringFunction1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonThreeArgumentStringFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThreeArgumentStringFunction1()
}

func (c *current) onIsDefined1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsDefined, []interface{}{ex})
}

func (p *parser) callonIsDefined1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsDefined1(stack["ex"])
}

func (c *current) onIsArray1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsArray, []interface{}{ex})
}

func (p *parser) callonIsArray1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsArray1(stack["ex"])
}

func (c *current) onIsBool1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsBool, []interface{}{ex})
}

func (p *parser) callonIsBool1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsBool1(stack["ex"])
}

func (c *current) onIsFiniteNumber1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsFiniteNumber, []interface{}{ex})
}

func (p *parser) callonIsFiniteNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsFiniteNumber1(stack["ex"])
}

func (c *current) onIsInteger1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsInteger, []interface{}{ex})
}

func (p *parser) callonIsInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsInteger1(stack["ex"])
}

func (c *current) onIsNull1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsNull, []interface{}{ex})
}

func (p *parser) callonIsNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsNull1(stack["ex"])
}

func (c *current) onIsNumber1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsNumber, []interface{}{ex})
}

func (p *parser) callonIsNumber1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsNumber1(stack["ex"])
}

func (c *current) onIsObject1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsObject, []interface{}{ex})
}

func (p *parser) callonIsObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsObject1(stack["ex"])
}

func (c *current) onIsPrimitive1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsPrimitive, []interface{}{ex})
}

func (p *parser) callonIsPrimitive1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsPrimitive1(stack["ex"])
}

func (c *current) onIsString1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIsString, []interface{}{ex})
}

func (p *parser) callonIsString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsString1(stack["ex"])
}

func (c *current) onArrayConcatExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArrayConcatExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayConcatExpression11(stack["ex"])
}

func (c *current) onArrayConcatExpression1(arrays, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayConcat, append([]interface{}{arrays}, others.([]interface{})...))
}

func (p *parser) callonArrayConcatExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayConcatExpression1(stack["arrays"], stack["others"])
}

func (c *current) onArrayContainsExpression16(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArrayContainsExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayContainsExpression16(stack["ex"])
}

func (c *current) onArrayContainsExpression1(array, item, partialMatch any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayContains, []interface{}{array, item, partialMatch})
}

func (p *parser) callonArrayContainsExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayContainsExpression1(stack["array"], stack["item"], stack["partialMatch"])
}

func (c *current) onArrayContainsAnyExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArrayContainsAnyExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayContainsAnyExpression11(stack["ex"])
}

func (c *current) onArrayContainsAnyExpression1(array, items any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayContainsAny, append([]interface{}{array}, items.([]interface{})...))
}

func (p *parser) callonArrayContainsAnyExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayContainsAnyExpression1(stack["array"], stack["items"])
}

func (c *current) onArrayContainsAllExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArrayContainsAllExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayContainsAllExpression11(stack["ex"])
}

func (c *current) onArrayContainsAllExpression1(array, items any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayContainsAll, append([]interface{}{array}, items.([]interface{})...))
}

func (p *parser) callonArrayContainsAllExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayContainsAllExpression1(stack["array"], stack["items"])
}

func (c *current) onArrayLengthExpression1(array any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArrayLength, []interface{}{array})
}

func (p *parser) callonArrayLengthExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArrayLengthExpression1(stack["array"])
}

func (c *current) onArraySliceExpression16(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonArraySliceExpression16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArraySliceExpression16(stack["ex"])
}

func (c *current) onArraySliceExpression1(array, start, length any) (any, error) {
	return createFunctionCall(parsers.FunctionCallArraySlice, []interface{}{array, start, length})
}

func (p *parser) callonArraySliceExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArraySliceExpression1(stack["array"], stack["start"], stack["length"])
}

func (c *current) onSetIntersectExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSetIntersect, []interface{}{set1, set2})
}

func (p *parser) callonSetIntersectExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetIntersectExpression1(stack["set1"], stack["set2"])
}

func (c *current) onSetUnionExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallSetUnion, []interface{}{set1, set2})
}

func (p *parser) callonSetUnionExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetUnionExpression1(stack["set1"], stack["set2"])
}

func (c *current) onIifExpression1(condition, trueValue, falseValue any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIif, []interface{}{condition, trueValue, falseValue})
}

func (p *parser) callonIifExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIifExpression1(stack["condition"], stack["trueValue"], stack["falseValue"])
}

func (c *current) onMathAbsExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAbs, []interface{}{ex})
}

func (p *parser) callonMathAbsExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAbsExpression1(stack["ex"])
}

func (c *current) onMathAcosExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAcos, []interface{}{ex})
}

func (p *parser) callonMathAcosExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAcosExpression1(stack["ex"])
}

func (c *current) onMathAsinExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAsin, []interface{}{ex})
}

func (p *parser) callonMathAsinExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAsinExpression1(stack["ex"])
}

func (c *current) onMathAtanExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAtan, []interface{}{ex})
}

func (p *parser) callonMathAtanExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAtanExpression1(stack["ex"])
}

func (c *current) onMathCeilingExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathCeiling, []interface{}{ex})
}

func (p *parser) callonMathCeilingExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathCeilingExpression1(stack["ex"])
}

func (c *current) onMathCosExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathCos, []interface{}{ex})
}

func (p *parser) callonMathCosExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathCosExpression1(stack["ex"])
}

func (c *current) onMathCotExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathCot, []interface{}{ex})
}

func (p *parser) callonMathCotExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathCotExpression1(stack["ex"])
}

func (c *current) onMathDegreesExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathDegrees, []interface{}{ex})
}

func (p *parser) callonMathDegreesExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathDegreesExpression1(stack["ex"])
}

func (c *current) onMathExpExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathExp, []interface{}{ex})
}

func (p *parser) callonMathExpExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathExpExpression1(stack["ex"])
}

func (c *current) onMathFloorExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathFloor, []interface{}{ex})
}

func (p *parser) callonMathFloorExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathFloorExpression1(stack["ex"])
}

func (c *current) onMathIntBitNotExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitNot, []interface{}{ex})
}

func (p *parser) callonMathIntBitNotExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitNotExpression1(stack["ex"])
}

func (c *current) onMathLog10Expression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathLog10, []interface{}{ex})
}

func (p *parser) callonMathLog10Expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathLog10Expression1(stack["ex"])
}

func (c *current) onMathRadiansExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathRadians, []interface{}{ex})
}

func (p *parser) callonMathRadiansExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathRadiansExpression1(stack["ex"])
}

func (c *current) onMathRoundExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathRound, []interface{}{ex})
}

func (p *parser) callonMathRoundExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathRoundExpression1(stack["ex"])
}

func (c *current) onMathSignExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSign, []interface{}{ex})
}

func (p *parser) callonMathSignExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSignExpression1(stack["ex"])
}

func (c *current) onMathSinExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSin, []interface{}{ex})
}

func (p *parser) callonMathSinExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSinExpression1(stack["ex"])
}

func (c *current) onMathSqrtExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSqrt, []interface{}{ex})
}

func (p *parser) callonMathSqrtExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSqrtExpression1(stack["ex"])
}

func (c *current) onMathSquareExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathSquare, []interface{}{ex})
}

func (p *parser) callonMathSquareExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathSquareExpression1(stack["ex"])
}

func (c *current) onMathTanExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathTan, []interface{}{ex})
}

func (p *parser) callonMathTanExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathTanExpression1(stack["ex"])
}

func (c *current) onMathTruncExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathTrunc, []interface{}{ex})
}

func (p *parser) callonMathTruncExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathTruncExpression1(stack["ex"])
}

func (c *current) onMathAtn2Expression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathAtn2, []interface{}{set1, set2})
}

func (p *parser) callonMathAtn2Expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathAtn2Expression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntAddExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntAdd, []interface{}{set1, set2})
}

func (p *parser) callonMathIntAddExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntAddExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitAndExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitAnd, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitAndExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitAndExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitLeftShiftExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitLeftShift, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitLeftShiftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitLeftShiftExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitOrExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitOr, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitOrExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitOrExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitRightShiftExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitRightShift, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitRightShiftExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitRightShiftExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntBitXorExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntBitXor, []interface{}{set1, set2})
}

func (p *parser) callonMathIntBitXorExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntBitXorExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntDivExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntDiv, []interface{}{set1, set2})
}

func (p *parser) callonMathIntDivExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntDivExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntModExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntMod, []interface{}{set1, set2})
}

func (p *parser) callonMathIntModExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntModExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntMulExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntMul, []interface{}{set1, set2})
}

func (p *parser) callonMathIntMulExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntMulExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathIntSubExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathIntSub, []interface{}{set1, set2})
}

func (p *parser) callonMathIntSubExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathIntSubExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathPowerExpression1(set1, set2 any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathPower, []interface{}{set1, set2})
}

func (p *parser) callonMathPowerExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathPowerExpression1(stack["set1"], stack["set2"])
}

func (c *current) onMathLogExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonMathLogExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathLogExpression11(stack["ex"])
}

func (c *current) onMathLogExpression1(ex1, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathLog, append([]interface{}{ex1}, others.([]interface{})...))
}

func (p *parser) callonMathLogExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathLogExpression1(stack["ex1"], stack["others"])
}

func (c *current) onMathNumberBinExpression11(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonMathNumberBinExpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathNumberBinExpression11(stack["ex"])
}

func (c *current) onMathNumberBinExpression1(ex1, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallMathNumberBin, append([]interface{}{ex1}, others.([]interface{})...))
}

func (p *parser) callonMathNumberBinExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathNumberBinExpression1(stack["ex1"], stack["others"])
}

func (c *current) onMathPiExpression1() (any, error) {
	return createFunctionCall(parsers.FunctionCallMathPi, []interface{}{})
}

func (p *parser) callonMathPiExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathPiExpression1()
}

func (c *current) onMathRandExpression1() (any, error) {
	return createFunctionCall(parsers.FunctionCallMathRand, []interface{}{})
}

func (p *parser) callonMathRandExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMathRandExpression1()
}

func (c *current) onInFunction15(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonInFunction15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction15(stack["ex"])
}

func (c *current) onInFunction2(ex1, ex2, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIn, append([]interface{}{ex1, ex2}, others.([]interface{})...))
}

func (p *parser) callonInFunction2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction2(stack["ex1"], stack["ex2"], stack["others"])
}

func (c *current) onInFunction39(ex any) (any, error) {
	return ex, nil
}

func (p *parser) callonInFunction39() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction39(stack["ex"])
}

func (c *current) onInFunction24(ex1, ex2, others any) (any, error) {
	return createFunctionCall(parsers.FunctionCallIn, append([]interface{}{ex1, ex2}, others.([]interface{})...))
}

func (p *parser) callonInFunction24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInFunction24(stack["ex1"], stack["ex2"], stack["others"])
}

func (c *current) onAvgAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateAvg, []interface{}{ex})
}

func (p *parser) callonAvgAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAvgAggregateExpression1(stack["ex"])
}

func (c *current) onCountAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateCount, []interface{}{ex})
}

func (p *parser) callonCountAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCountAggregateExpression1(stack["ex"])
}

func (c *current) onMaxAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateMax, []interface{}{ex})
}

func (p *parser) callonMaxAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMaxAggregateExpression1(stack["ex"])
}

func (c *current) onMinAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateMin, []interface{}{ex})
}

func (p *parser) callonMinAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinAggregateExpression1(stack["ex"])
}

func (c *current) onSumAggregateExpression1(ex any) (any, error) {
	return createFunctionCall(parsers.FunctionCallAggregateSum, []interface{}{ex})
}

func (p *parser) callonSumAggregateExpression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSumAggregateExpression1(stack["ex"])
}

func (c *current) onInteger1() (any, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonInteger1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInteger1()
}

func (c *current) onStringCharacter2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonStringCharacter2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringCharacter2()
}

func (c *current) onStringCharacter9(seq any) (any, error) {
	return seq, nil
}

func (p *parser) callonStringCharacter9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringCharacter9(stack["seq"])
}

func (c *current) onEscapeCharacter5() (any, error) {
	return "\b", nil
}

func (p *parser) callonEscapeCharacter5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter5()
}

func (c *current) onEscapeCharacter7() (any, error) {
	return "\f", nil
}

func (p *parser) callonEscapeCharacter7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter7()
}

func (c *current) onEscapeCharacter9() (any, error) {
	return "\n", nil
}

func (p *parser) callonEscapeCharacter9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter9()
}

func (c *current) onEscapeCharacter11() (any, error) {
	return "\r", nil
}

func (p *parser) callonEscapeCharacter11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter11()
}

func (c *current) onEscapeCharacter13() (any, error) {
	return "\t", nil
}

func (p *parser) callonEscapeCharacter13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeCharacter13()
}

func (c *current) onnon_escape_character1(char any) (any, error) {
	return string(c.text), nil
}

func (p *parser) callonnon_escape_character1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnon_escape_character1(stack["char"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
